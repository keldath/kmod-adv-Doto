#pragma once

#ifndef CVENUMS_h
#define CVENUMS_h

/*  advc (note): All enum types in this file are -probably- exposed to Python
	through CyEnumsInterface.cpp -- unless a comment states otherwise. Also,
	the EXE might use any of the enum types (no DllExport needed), so
	enumerators should generally only be added to the end of an enum definition. */
// <advc.enum>
#include "CvEnumMacros.h"
/*************************************************************************************************/
/** TGA_INDEXATION                       10/16/07                                MRGENIE      */
/**                                                                                              */
/**                                                                                              */
/*************************************************************************************************/
#include "CvDefinesTGA.h"
/*************************************************************************************************/
/** TGA_INDEXATION                       END                                                  */
/*************************************************************************************************/

/*	Player limits: Moved from CvDefines into the enum types.
	(Can always turn MAX_CIV_PLAYERS back into a preprocessor define
	if that helps in making the player limits more flexible.) */
//#ifdef _USRDLL
//	#define MAX_CIV_PLAYERS ((PlayerTypes)18)
//#else
//	#define MAX_CIV_PLAYERS ((PlayerTypes)CvGlobals::getInstance().getMaxCivPlayers())
//#endif
enum PlayerTypes
{
	NO_PLAYER = -1,
	// K-Mod (note): default is 18, some people like 48. They are not compatible.
	/*  advc.056 (note): Scenario (WB) files are now compatible so long
		as the player ids in the WB file don't exceed MAX_CIV_PLAYERS in the DLL.
		Savegames are still incompatible. */
	MAX_CIV_PLAYERS = 18,
	BARBARIAN_PLAYER = MAX_CIV_PLAYERS,
	MAX_PLAYERS
};
DEFINE_INCREMENT_OPERATORS(PlayerTypes);

enum TeamTypes
{
	NO_TEAM = -1,
	BARBARIAN_TEAM = MAX_CIV_PLAYERS,
	MAX_CIV_TEAMS = BARBARIAN_TEAM,
	MAX_TEAMS
};
DEFINE_INCREMENT_OPERATORS(TeamTypes);

/*  Smaller numbers may already crash the EXE; the DLL assumes in some places
	that player ids fit in a single (signed) byte. */
BOOST_STATIC_ASSERT(MAX_PLAYERS < MAX_CHAR && MAX_TEAMS < MAX_CHAR);

// Excluding the Barbarians (mainly for EnumMap)
enum CivPlayerTypes
{
	NO_CIV_PLAYER = -1,
	NUM_CIV_PLAYER_TYPES = static_cast<CivPlayerTypes>(MAX_CIV_PLAYERS)
};
DEFINE_INCREMENT_OPERATORS(CivPlayerTypes);
enum CivTeamTypes
{
	NO_CIV_TEAM = -1,
	NUM_CIV_TEAM_TYPES = static_cast<CivTeamTypes>(MAX_CIV_TEAMS)
};
DEFINE_INCREMENT_OPERATORS(CivTeamTypes);

// This generates most of the enums with associated XML data
DO_FOR_EACH_DYN_INFO_TYPE(MAKE_INFO_ENUM)

/*  The order of the enums is mostly as in BtS (i.e. arbitrary) except that the
	info enums are generated upfront and enums that don't support FOR_EACH_ENUM
	have been moved to the end. */ // </advc.enum>

/*  advc: WorldSize and Flavor are special -- there are hardcoded values, but it's
	still possible to add values through XML only.
	(The harcoded world sizes are used by map scripts.) */
enum WorldSizeTypes
{
	NO_WORLDSIZE = -1,
	WORLDSIZE_DUEL,
	WORLDSIZE_TINY,
	WORLDSIZE_SMALL,
	WORLDSIZE_STANDARD,
	WORLDSIZE_LARGE,
	WORLDSIZE_HUGE,
};

enum FlavorTypes
{
	NO_FLAVOR = -1,
	// K-Mod. These are the current flavors defined in GlobalTypes.xml
	FLAVOR_MILITARY,
	FLAVOR_RELIGION,
	FLAVOR_PRODUCTION,
	FLAVOR_GOLD,
	FLAVOR_SCIENCE,
	FLAVOR_CULTURE,
	FLAVOR_GROWTH,
	// K-Mod end
	/*  advc.001: Added by BtS, missing in karadoc's list. Not a bug really, just
		means that it was impossible to base AI code on FLAVOR_ESPIONAGE. */
	FLAVOR_ESPIONAGE,
};
DEFINE_INCREMENT_OPERATORS(FlavorTypes);
// <advc.enum> (cf. CvMap::plotNum)
/*	2 byte (short) allow for at most 256*128 tiles (or 181*181).
	Larger maps really aren't playable, but let's allow them
	if the civ limit has been increased by a lot. */
typedef choose_type<(MAX_CIV_PLAYERS >= 32),int,short>::type PlotNumInt;
enum PlotNumTypes
{
	NO_PLOT_NUM = -1,
	// -1 allows checking bounds through less-than w/o overflow
	MAX_PLOT_NUM = integer_limits<PlotNumInt>::max - 1
};
DEFINE_INCREMENT_OPERATORS(PlotNumTypes);
// </advc.enum>

ENUM_START(GameState, GAMESTATE)
	GAMESTATE_ON,
	GAMESTATE_OVER,
	GAMESTATE_EXTENDED,
ENUM_END(GameState, GAMESTATE)

ENUM_START(PopupEvent, POPUPEVENT)
	POPUPEVENT_NONE,
	POPUPEVENT_PRODUCTION,
	POPUPEVENT_TECHNOLOGY,
	POPUPEVENT_RELIGION,
	POPUPEVENT_WARNING,
	POPUPEVENT_CIVIC,
ENUM_END(PopupEvent, POPUPEVENT)

ENUM_START(CameraLookAt, CAMERALOOKAT)
	CAMERALOOKAT_NORMAL,
	CAMERALOOKAT_CITY_ZOOM_IN,
	CAMERALOOKAT_BATTLE,
	CAMERALOOKAT_BATTLE_ZOOM_IN,
	CAMERALOOKAT_SHRINE_ZOOM_IN,
	CAMERALOOKAT_IMMEDIATE,
	CAMERALOOKAT_HOTSEAT,
ENUM_END(CameraLookAt, CAMERALOOKAT)

ENUM_START(CameraMovementSpeed, CAMERAMOVEMENTSPEED)
	CAMERAMOVEMENTSPEED_NORMAL,
	CAMERAMOVEMENTSPEED_SLOW,
	CAMERAMOVEMENTSPEED_FAST,
ENUM_END(CameraMovementSpeed, CAMERAMOVEMENTSPEED)
typedef CameraMovementSpeedTypes CameraMovementSpeeds;

ENUM_START(Direction, DIRECTION)
	DIRECTION_NORTH,
	DIRECTION_NORTHEAST,
	DIRECTION_EAST,
	DIRECTION_SOUTHEAST,
	DIRECTION_SOUTH,
	DIRECTION_SOUTHWEST,
	DIRECTION_WEST,
	DIRECTION_NORTHWEST,
#ifdef _USRDLL
	NUM_ENUM_TYPES(DIRECTION),
#endif
	DIRECTION_NORTH_MASK = 1 << DIRECTION_NORTH,
	DIRECTION_NORTHEAST_MASK = 1 << DIRECTION_NORTHEAST,
	DIRECTION_EAST_MASK = 1 << DIRECTION_EAST,
	DIRECTION_SOUTHEAST_MASK = 1 << DIRECTION_SOUTHEAST,
	DIRECTION_SOUTH_MASK = 1 << DIRECTION_SOUTH,
	DIRECTION_SOUTHWEST_MASK = 1 << DIRECTION_SOUTHWEST,
	DIRECTION_WEST_MASK = 1 << DIRECTION_WEST,
	DIRECTION_NORTHWEST_MASK = 1 << DIRECTION_NORTHWEST,
ENUM_END_HIDDEN(Direction, DIRECTION)

ENUM_START(CardinalDirection, CARDINALDIRECTION)
	CARDINALDIRECTION_NORTH,
	CARDINALDIRECTION_EAST,
	CARDINALDIRECTION_SOUTH,
	CARDINALDIRECTION_WEST,
ENUM_END(CardinalDirection, CARDINALDIRECTION)

ENUM_START(Rotation, ROTATE) // (not exposed to Python)
	ROTATE_NONE,
	ROTATE_90CW,
	ROTATE_180CW,
	ROTATE_270CW,
	NUM_ROTATION_TYPES,
	ROTATE_NONE_MASK	= 1 << ROTATE_NONE,
	ROTATE_90CW_MASK	= 1 << ROTATE_90CW,
	ROTATE_180CW_MASK	= 1 << ROTATE_180CW,
	ROTATE_270CW_MASK	= 1 << ROTATE_270CW,
ENUM_END_HIDDEN(Rotation, ROTATION)

ENUM_START(WrapDirection, WRAP) // camera wrap helper (not exposed to Python)
	WRAP_SAVE,
	WRAP_NONE = WRAP_SAVE,
	WRAP_RESTORE,
	WRAP_LEFT,
	WRAP_RIGHT,
	WRAP_UP,
	WRAP_DOWN,
#ifdef _USRDLL
	NUM_WRAP_DIRECTION_TYPES,
#endif
	WRAP_LEFT_MASK = 1 << WRAP_LEFT,
	WRAP_RIGHT_MASK = 1 << WRAP_RIGHT,
	WRAP_UP_MASK = 1 << WRAP_UP,
	WRAP_DOWN_MASK = 1 << WRAP_DOWN,
ENUM_END_HIDDEN(WrapDirection, WRAP_DIRECTION)

//Warning: these values correspond to locations in the plot texture [JW]
ENUM_START(PlotStyle, PLOT_STYLE)
	//first row
	PLOT_STYLE_NUMPAD_1,
	PLOT_STYLE_NUMPAD_2,
	PLOT_STYLE_NUMPAD_3,
	PLOT_STYLE_NUMPAD_4,
	PLOT_STYLE_NUMPAD_6,
	PLOT_STYLE_NUMPAD_7,
	PLOT_STYLE_NUMPAD_8,
	PLOT_STYLE_NUMPAD_9,

	//second row
	PLOT_STYLE_NUMPAD_1_ANGLED, // = 8
	PLOT_STYLE_NUMPAD_2_ANGLED,
	PLOT_STYLE_NUMPAD_3_ANGLED,
	PLOT_STYLE_NUMPAD_4_ANGLED,
	PLOT_STYLE_NUMPAD_6_ANGLED,
	PLOT_STYLE_NUMPAD_7_ANGLED,
	PLOT_STYLE_NUMPAD_8_ANGLED,
	PLOT_STYLE_NUMPAD_9_ANGLED,

	//third row
	PLOT_STYLE_BOX_FILL, // = 16
	PLOT_STYLE_BOX_OUTLINE,
	PLOT_STYLE_RIVER_SOUTH,
	PLOT_STYLE_RIVER_EAST,
	PLOT_STYLE_SIDE_ARROWS,
	PLOT_STYLE_CIRCLE,
	PLOT_STYLE_TARGET,
	PLOT_STYLE_DOT_TARGET,

	//fourth row
	PLOT_STYLE_WAVES, // = 24
	PLOT_STYLE_DOTS,
	PLOT_STYLE_CIRCLES,
ENUM_END(PlotStyle, PLOT_STYLE)
typedef PlotStyleTypes PlotStyles;

ENUM_START(InterfaceMode, INTERFACEMODE)
	INTERFACEMODE_SELECTION,
	INTERFACEMODE_PING,
	INTERFACEMODE_SIGN,
	INTERFACEMODE_GRIP,
	INTERFACEMODE_GLOBELAYER_INPUT,
	INTERFACEMODE_GO_TO,
	INTERFACEMODE_GO_TO_TYPE,
	INTERFACEMODE_GO_TO_ALL,
	INTERFACEMODE_ROUTE_TO,
	INTERFACEMODE_AIRLIFT,
	INTERFACEMODE_NUKE,
	INTERFACEMODE_RECON,
	INTERFACEMODE_PARADROP,
	INTERFACEMODE_AIRBOMB,
	INTERFACEMODE_RANGE_ATTACK,
	INTERFACEMODE_AIRSTRIKE,
	INTERFACEMODE_REBASE,
	INTERFACEMODE_PYTHON_PICK_PLOT,
	INTERFACEMODE_SAVE_PLOT_NIFS,
ENUM_END(InterfaceMode, INTERFACEMODE)

ENUM_START(InterfaceMessage, MESSAGE_TYPE)
	MESSAGE_TYPE_INFO,
	MESSAGE_TYPE_DISPLAY_ONLY,
	MESSAGE_TYPE_MAJOR_EVENT,
	MESSAGE_TYPE_MINOR_EVENT,
	MESSAGE_TYPE_CHAT,
	MESSAGE_TYPE_COMBAT_MESSAGE,
	MESSAGE_TYPE_QUEST,
	// <advc.106b>
	MESSAGE_TYPE_MAJOR_EVENT_LOG_ONLY,
	MESSAGE_TYPE_EOT, // </advc.106b>
ENUM_END(InterfaceMessage, INTERFACE_MESSAGE)

ENUM_START(Flyout, FLYOUT)
	FLYOUT_HURRY,
	FLYOUT_CONSCRIPT,
	FLYOUT_TRAIN,
	FLYOUT_CONSTRUCT,
	FLYOUT_CREATE,
	FLYOUT_MAINTAIN,
	FLYOUT_MOVE_TO,
	FLYOUT_SELECT_UNIT,
	FLYOUT_SELECT_ALL,
	FLYOUT_WAKE_ALL,
	FLYOUR_FORTIFY_ALL,
	FLYOUR_SLEEP_ALL,
ENUM_END(Flyout, FLYOUT)

ENUM_START(MinimapMode, MINIMAPMODE)
	MINIMAPMODE_TERRITORY,
	MINIMAPMODE_TERRAIN,
	MINIMAPMODE_REPLAY,
	MINIMAPMODE_MILITARY,
ENUM_END(MinimapMode, MINIMAPMODE)

ENUM_START(CityTab, CITYTAB)
	CITYTAB_UNITS,
	CITYTAB_BUILDINGS,
	CITYTAB_WONDERS,
ENUM_END(CityTab, CITYTAB)

ENUM_START(Widget, WIDGET)
	WIDGET_PLOT_LIST,
	WIDGET_PLOT_LIST_SHIFT,
	WIDGET_CITY_SCROLL,
	WIDGET_LIBERATE_CITY,
	WIDGET_CITY_NAME,
	WIDGET_UNIT_NAME,
	WIDGET_CREATE_GROUP,
	WIDGET_DELETE_GROUP,
	WIDGET_TRAIN,
	WIDGET_CONSTRUCT,
	WIDGET_CREATE,
	WIDGET_MAINTAIN,
	WIDGET_HURRY,
	WIDGET_MENU_ICON,
	WIDGET_CONSCRIPT,
	WIDGET_ACTION,
	WIDGET_DISABLED_CITIZEN,
	WIDGET_CITIZEN,
	WIDGET_FREE_CITIZEN,
	WIDGET_ANGRY_CITIZEN,
	WIDGET_CHANGE_SPECIALIST,
	WIDGET_RESEARCH,
	WIDGET_TECH_TREE,
	WIDGET_CHANGE_PERCENT,
	WIDGET_CITY_TAB,
	WIDGET_CONTACT_CIV,
	WIDGET_SCORE_BREAKDOWN,
	WIDGET_ZOOM_CITY,
	WIDGET_END_TURN,
	WIDGET_LAUNCH_VICTORY,
	WIDGET_CONVERT,
	WIDGET_AUTOMATE_CITIZENS,
	WIDGET_AUTOMATE_PRODUCTION,
	WIDGET_EMPHASIZE,
	WIDGET_DIPLOMACY_RESPONSE,
	WIDGET_GENERAL,
	WIDGET_FILE_LISTBOX,
	WIDGET_FILE_EDITBOX,
	WIDGET_WB_UNITNAME_EDITBOX,
	WIDGET_WB_CITYNAME_EDITBOX,
	WIDGET_WB_SAVE_BUTTON,
	WIDGET_WB_LOAD_BUTTON,
	WIDGET_WB_ALL_PLOTS_BUTTON,
	WIDGET_WB_LANDMARK_BUTTON,
	WIDGET_WB_ERASE_BUTTON,
	WIDGET_WB_EXIT_BUTTON,
	WIDGET_WB_UNIT_EDIT_BUTTON,
	WIDGET_WB_CITY_EDIT_BUTTON,
	WIDGET_WB_NORMAL_PLAYER_TAB_MODE_BUTTON,
	WIDGET_WB_NORMAL_MAP_TAB_MODE_BUTTON,
	WIDGET_WB_REVEAL_TAB_MODE_BUTTON,
	WIDGET_WB_DIPLOMACY_MODE_BUTTON,
	WIDGET_WB_REVEAL_ALL_BUTTON,
	WIDGET_WB_UNREVEAL_ALL_BUTTON,
	WIDGET_WB_REGENERATE_MAP,
	WIDGET_TRADE_ITEM,
	WIDGET_UNIT_MODEL,
	WIDGET_FLAG,
	WIDGET_POPUP_QUEUE,

	//	This is meant for python buttons, it will call python functions for display and execution
	WIDGET_PYTHON,

	//	This button type is reserved for widgets meant to be displayed only.  This is meant for general interface text and such...
	WIDGET_HELP_MAINTENANCE,
	WIDGET_HELP_RELIGION,
	WIDGET_HELP_RELIGION_CITY,
	WIDGET_HELP_CORPORATION_CITY,
	WIDGET_HELP_NATIONALITY,
	WIDGET_HELP_DEFENSE,
	WIDGET_HELP_HEALTH,
	WIDGET_HELP_HAPPINESS,
	WIDGET_HELP_POPULATION,
	WIDGET_HELP_PRODUCTION,
	WIDGET_HELP_CULTURE,
	WIDGET_HELP_GREAT_PEOPLE,
	WIDGET_HELP_GREAT_GENERAL,
	WIDGET_HELP_SELECTED,
	WIDGET_HELP_BUILDING,
	WIDGET_HELP_TRADE_ROUTE_CITY,
	WIDGET_HELP_ESPIONAGE_COST,
	WIDGET_HELP_TECH_ENTRY,
	WIDGET_HELP_TECH_PREPREQ,
	WIDGET_HELP_OBSOLETE,
	WIDGET_HELP_OBSOLETE_BONUS,
	WIDGET_HELP_OBSOLETE_SPECIAL,
	WIDGET_HELP_MOVE_BONUS,
	WIDGET_HELP_FREE_UNIT,
	WIDGET_HELP_FEATURE_PRODUCTION,
	WIDGET_HELP_WORKER_RATE,
	WIDGET_HELP_TRADE_ROUTES,
	WIDGET_HELP_HEALTH_RATE,
	WIDGET_HELP_HAPPINESS_RATE,
	WIDGET_HELP_FREE_TECH,
	WIDGET_HELP_LOS_BONUS,
	WIDGET_HELP_MAP_CENTER,
	WIDGET_HELP_MAP_REVEAL,
	WIDGET_HELP_MAP_TRADE,
	WIDGET_HELP_TECH_TRADE,
	WIDGET_HELP_GOLD_TRADE,
	WIDGET_HELP_OPEN_BORDERS,
	WIDGET_HELP_DEFENSIVE_PACT,
	WIDGET_HELP_PERMANENT_ALLIANCE,
	WIDGET_HELP_VASSAL_STATE,
	WIDGET_HELP_BUILD_BRIDGE,
	WIDGET_HELP_IRRIGATION,
	WIDGET_HELP_IGNORE_IRRIGATION,
	WIDGET_HELP_WATER_WORK,
	WIDGET_HELP_IMPROVEMENT,
	WIDGET_HELP_DOMAIN_EXTRA_MOVES,
	WIDGET_HELP_ADJUST,
	WIDGET_HELP_TERRAIN_TRADE,
	WIDGET_HELP_SPECIAL_BUILDING,
	WIDGET_HELP_YIELD_CHANGE,
	WIDGET_HELP_BONUS_REVEAL,
	WIDGET_HELP_CIVIC_REVEAL,
	WIDGET_HELP_PROCESS_INFO,
	WIDGET_HELP_FOUND_RELIGION,
	WIDGET_HELP_FOUND_CORPORATION,
	WIDGET_HELP_FINANCE_NUM_UNITS,
	WIDGET_HELP_FINANCE_UNIT_COST,
	WIDGET_HELP_FINANCE_AWAY_SUPPLY,
	WIDGET_HELP_FINANCE_CITY_MAINT,
	WIDGET_HELP_FINANCE_CIVIC_UPKEEP,
	WIDGET_HELP_FINANCE_FOREIGN_INCOME,
	WIDGET_HELP_FINANCE_INFLATED_COSTS,
	WIDGET_HELP_FINANCE_GROSS_INCOME,
	WIDGET_HELP_FINANCE_NET_GOLD,
	WIDGET_HELP_FINANCE_GOLD_RESERVE,
	WIDGET_HELP_PROMOTION,

	WIDGET_CHOOSE_EVENT,
	WIDGET_PEDIA_JUMP_TO_TECH,
	WIDGET_PEDIA_JUMP_TO_UNIT,
	WIDGET_PEDIA_JUMP_TO_BUILDING,
	WIDGET_PEDIA_JUMP_TO_REQUIRED_TECH,
	WIDGET_PEDIA_JUMP_TO_DERIVED_TECH,
	WIDGET_PEDIA_BACK,
	WIDGET_PEDIA_FORWARD,
	WIDGET_PEDIA_JUMP_TO_BONUS,
	WIDGET_PEDIA_MAIN,
	WIDGET_PEDIA_JUMP_TO_PROMOTION,
	WIDGET_PEDIA_JUMP_TO_UNIT_COMBAT,
	WIDGET_PEDIA_JUMP_TO_IMPROVEMENT,
	WIDGET_PEDIA_JUMP_TO_CIVIC,
	WIDGET_PEDIA_JUMP_TO_CIV,
	WIDGET_PEDIA_JUMP_TO_LEADER,
	WIDGET_PEDIA_JUMP_TO_SPECIALIST,
	WIDGET_PEDIA_JUMP_TO_PROJECT,
	WIDGET_PEDIA_JUMP_TO_TERRAIN,
	WIDGET_PEDIA_JUMP_TO_FEATURE,
	WIDGET_TURN_EVENT,
	WIDGET_FOREIGN_ADVISOR,
	WIDGET_REVOLUTION,
	WIDGET_PEDIA_DESCRIPTION,
	WIDGET_PEDIA_DESCRIPTION_NO_HELP,
	WIDGET_DEAL_KILL,
	WIDGET_MINIMAP_HIGHLIGHT,
	WIDGET_PRODUCTION_MOD_HELP,
	WIDGET_LEADERHEAD,
	WIDGET_LEADER_LINE,
	WIDGET_COMMERCE_MOD_HELP,
	/*	advc: See the K-Mod comment below. The EXE apparently relies on this id.
		But I expect that some other enumerators are also hardcoded in the EXE. */
	WIDGET_CLOSE_SCREEN = 157,
	WIDGET_PEDIA_JUMP_TO_RELIGION,
	WIDGET_PEDIA_JUMP_TO_CORPORATION,
	WIDGET_GLOBELAYER,
	WIDGET_GLOBELAYER_OPTION,
	WIDGET_GLOBELAYER_TOGGLE,
	/*	K-Mod. Environmental advisor widgets.
		Note: this apparently breaks WIDGET_CLOSE_SCREEN if it is defined out of order. */
	WIDGET_HELP_POLLUTION_OFFSETS,
	WIDGET_HELP_POLLUTION_SOURCE,
	WIDGET_HELP_SUSTAINABILITY_THRESHOLD,
	WIDGET_HELP_GW_RELATIVE_CONTRIBUTION,
	WIDGET_HELP_GW_INDEX,
	WIDGET_HELP_GW_UNHAPPY,

	WIDGET_HELP_EXTRA_SPECIALIST_COMMERCE,
	// K-Mod end
	WIDGET_RF_CIV_CHOICE, // advc.706
	WIDGET_LH_GLANCE, // advc.152
	WIDGET_SHOW_REPLAY, // advc.106i
	// BULL - Trade Denial - start
	WIDGET_PEDIA_JUMP_TO_BONUS_TRADE,
	WIDGET_PEDIA_JUMP_TO_TECH_TRADE,
	// BULL - Trade Denial - end
	WIDGET_TRADE_ROUTES, // BULL - Trade Hover - start
	// BULL - Finance Advisor - start
	WIDGET_HELP_FINANCE_DOMESTIC_TRADE,
	WIDGET_HELP_FINANCE_FOREIGN_TRADE,
	WIDGET_HELP_FINANCE_SPECIALISTS,
	// BULL - Finance Advisor - end
	WIDGET_LEADERHEAD_RELATIONS, // BULL - Leaderhead Relations
	WIDGET_FOOD_MOD_HELP, // BULL - Food Rate Hover
	// <advc.085>
	WIDGET_EXPAND_SCORES,
	WIDGET_POWER_RATIO,
	WIDGET_GOLDEN_AGE,
	WIDGET_ANARCHY, // </advc.085>
	WIDGET_CITY_TRADE, // advc.ctr
	WIDGET_CYCLE_UNIT, // advc.154
	WIDGET_EXAMINE_CITY, // advc.186b (for BULL - Zoom City Details)
//doto wonder limit - city hover help
	WIDGET_WONDER_LIMITS,
//doto wonder limit - city hover help
ENUM_END(Widget, WIDGET)

ENUM_START(ButtonPopup, BUTTONPOPUP)
	BUTTONPOPUP_TEXT,
	BUTTONPOPUP_MAIN_MENU,
	BUTTONPOPUP_CONFIRM_MENU,
	BUTTONPOPUP_DECLAREWARMOVE,
	BUTTONPOPUP_CONFIRMCOMMAND,
	BUTTONPOPUP_LOADUNIT,
	BUTTONPOPUP_LEADUNIT,
	BUTTONPOPUP_DOESPIONAGE,
	BUTTONPOPUP_DOESPIONAGE_TARGET,
	BUTTONPOPUP_CHOOSETECH,
	BUTTONPOPUP_RAZECITY,
	BUTTONPOPUP_DISBANDCITY,
	BUTTONPOPUP_CHOOSEPRODUCTION,
	BUTTONPOPUP_CHANGECIVIC,
	BUTTONPOPUP_CHANGERELIGION,
	BUTTONPOPUP_CHOOSEELECTION,
	BUTTONPOPUP_DIPLOVOTE,
	BUTTONPOPUP_ALARM,
	BUTTONPOPUP_DEAL_CANCELED,
	BUTTONPOPUP_PYTHON,
	BUTTONPOPUP_PYTHON_SCREEN,
	BUTTONPOPUP_DETAILS,
	BUTTONPOPUP_ADMIN,
	BUTTONPOPUP_ADMIN_PASSWORD,
	BUTTONPOPUP_EXTENDED_GAME,
	BUTTONPOPUP_DIPLOMACY,
	BUTTONPOPUP_ADDBUDDY,
	BUTTONPOPUP_FORCED_DISCONNECT,
	BUTTONPOPUP_PITBOSS_DISCONNECT,
	BUTTONPOPUP_KICKED,
	BUTTONPOPUP_VASSAL_DEMAND_TRIBUTE,
	BUTTONPOPUP_VASSAL_GRANT_TRIBUTE,
	BUTTONPOPUP_EVENT,
	BUTTONPOPUP_FREE_COLONY,
	BUTTONPOPUP_LAUNCH,
	BUTTONPOPUP_FOUND_RELIGION,
	// <advc.706>
	BUTTONPOPUP_RF_CHOOSECIV,
	BUTTONPOPUP_RF_DEFEAT,
	BUTTONPOPUP_RF_RETIRE, // </advc.706>
ENUM_END(ButtonPopup, BUTTONPOPUP)

ENUM_START(Plot, PLOT)
	PLOT_PEAK,
	PLOT_HILLS,
	PLOT_LAND,
	PLOT_OCEAN,
ENUM_END(Plot, PLOT)

ENUM_START(Yield, YIELD)
	YIELD_FOOD,
	YIELD_PRODUCTION,
	YIELD_COMMERCE,
ENUM_END(Yield, YIELD)

ENUM_START(Commerce, COMMERCE)
	COMMERCE_GOLD,
	COMMERCE_RESEARCH,
	COMMERCE_CULTURE,
	COMMERCE_ESPIONAGE,
ENUM_END(Commerce, COMMERCE)

ENUM_START(GameOption, GAMEOPTION)
	GAMEOPTION_ADVANCED_START,
	GAMEOPTION_SPAH, // advc.250b: Taking the spot of NO_CITY_RAZING
	GAMEOPTION_NO_CITY_FLIPPING,
	GAMEOPTION_NO_FLIPPING_AFTER_CONQUEST, // advc.101
	GAMEOPTION_NO_BARBARIANS,
	GAMEOPTION_RAGING_BARBARIANS,
	GAMEOPTION_AGGRESSIVE_AI,
	GAMEOPTION_LEAD_ANY_CIV,
	GAMEOPTION_RANDOM_PERSONALITIES,
	GAMEOPTION_PICK_RELIGION,
	GAMEOPTION_NO_TECH_TRADING,
	GAMEOPTION_NO_TECH_BROKERING,
	GAMEOPTION_PERMANENT_ALLIANCES,
	GAMEOPTION_ALWAYS_WAR,
	GAMEOPTION_ALWAYS_PEACE,
	GAMEOPTION_ONE_CITY_CHALLENGE,
	GAMEOPTION_NO_CHANGING_WAR_PEACE,
	GAMEOPTION_RISE_FALL, // advc.701: Taking the spot of NEW_RANDOM_SEED
	GAMEOPTION_LOCK_MODS,
	GAMEOPTION_NEW_RANDOM_SEED, // advc.701: Taking the spot of COMPLETE_KILLS
	GAMEOPTION_NO_VASSAL_STATES,
	GAMEOPTION_NO_GOODY_HUTS,
	GAMEOPTION_NO_EVENTS,
	GAMEOPTION_NO_ESPIONAGE,
	GAMEOPTION_NO_CITY_RAZING, // advc.250b: Moved down
	GAMEOPTION_NO_ANIMALS, // advc.309
	GAMEOPTION_NO_SLAVERY, // advc.912d
//MOD@VET_Andera412_Blocade_Unit-begin1/1
	GAMEOPTION_BLOCADE_UNIT,
//MOD@VET_Andera412_Blocade_Unit-end1/1	
    GAMEOPTION_MOUNTAINS,//AND Mountains  Option
    GAMEOPTION_TECH_DIFFUSION, //Tech Diffusion Option by Stolenrays	
    GAMEOPTION_CULTURE_CONTROL,//Culture Control Gameoption by Stolenrays
    GAMEOPTION_SUPER_FORTS,//Culture Control Gameoption by Stolenrays
//Influence Driven War: Added for PIG Mod by PieceOfMind 26/10/09
	GAMEOPTION_INFLUENCE_DRIVEN_WAR,
	GAMEOPTION_IDW_NO_BARBARIAN,
	GAMEOPTION_IDW_NO_NAVAL,
	GAMEOPTION_IDW_PILLAGE,
//Influence Driven War: End Add
//DOTO -tholish-Keldath inactive buildings
	GAMEOPTION_BUILDING_DELETION,
	GAMEOPTION_CULTURE_GOLDEN_AGE,
//tholih building deletion keldath added as an option
//by keldath
	GAMEOPTION_CULTURE_WONDER_LIMIT,
	GAMEOPTION_CULTURE_WONDER_LIMIT_OBSOLETE,
	GAMEOPTION_EXTRA_BUILDINGS,
    GAMEOPTION_NO_CORPORATIONS,
	GAMEOPTION_LIMITED_RELIGION,
	GAMEOPTION_FORBIDDEN_RELIGION,
    GAMEOPTION_BARBARIAN_CIV,//python mod see event manager
	GAMEOPTION_NO_POPULATION_LIMIT,
	GAMEOPTION_LEFT_FROM_BEHIND,
//rangedattack-keldath
	GAMEOPTION_RANGED_ATTACK,
	GAMEOPTION_RANGED_IMMUNITY,
	GAMEOPTION_RANGED_RETALIATE,
	GAMEOPTION_NO_RANGED_COLLATERAL,
	GAMEOPTION_RAND_HIT,
	GAMEOPTION_RAND_DMG,
	GAMEOPTION_SCENARIO_PLAY,

ENUM_END(GameOption, GAMEOPTION)

ENUM_START(MultiplayerOption, MPOPTION)
	MPOPTION_SIMULTANEOUS_TURNS,
	MPOPTION_TAKEOVER_AI,
	MPOPTION_SHUFFLE_TEAMS,
	MPOPTION_ANONYMOUS,
	MPOPTION_TURN_TIMER,
ENUM_END(MultiplayerOption, MPOPTION)
typedef MultiplayerOptionTypes MPOptionTypes; // advc.enum

ENUM_START(SpecialOption, SPECIALOPTION)
	SPECIALOPTION_REPORT_STATS,
ENUM_END(SpecialOption, SPECIALOPTION)

ENUM_START(PlayerOption, PLAYEROPTION)
	PLAYEROPTION_ADVISOR_POPUPS,
	PLAYEROPTION_ADVISOR_HELP,
	PLAYEROPTION_WAIT_END_TURN,
	PLAYEROPTION_MINIMIZE_POP_UPS,
	PLAYEROPTION_SHOW_FRIENDLY_MOVES,
	PLAYEROPTION_SHOW_ENEMY_MOVES,
	PLAYEROPTION_QUICK_MOVES,
	PLAYEROPTION_QUICK_ATTACK,
	PLAYEROPTION_QUICK_DEFENSE,
	PLAYEROPTION_STACK_ATTACK,
	PLAYEROPTION_AUTO_PROMOTION,
	PLAYEROPTION_START_AUTOMATED,
	PLAYEROPTION_SAFE_AUTOMATION,
	PLAYEROPTION_NUMPAD_HELP,
	PLAYEROPTION_NO_UNIT_CYCLING,
	PLAYEROPTION_NO_UNIT_RECOMMENDATIONS,
	PLAYEROPTION_RIGHT_CLICK_MENU,
	PLAYEROPTION_LEAVE_FORESTS,
	PLAYEROPTION_MISSIONARIES_AUTOMATED,
	PLAYEROPTION_MODDER_1,
	PLAYEROPTION_MODDER_2,
	PLAYEROPTION_MODDER_3,
ENUM_END(PlayerOption, PLAYEROPTION)

ENUM_START(GraphicOption, GRAPHICOPTION)
	GRAPHICOPTION_SINGLE_UNIT_GRAPHICS,
	GRAPHICOPTION_HEALTH_BARS,
	GRAPHICOPTION_CITY_DETAIL,
	GRAPHICOPTION_NO_COMBAT_ZOOM,
	GRAPHICOPTION_NO_ENEMY_GLOW,
	GRAPHICOPTION_FROZEN_ANIMATIONS,
	GRAPHICOPTION_EFFECTS_DISABLED,
	GRAPHICOPTION_GLOBE_VIEW_BUILDINGS_DISABLED,
	GRAPHICOPTION_FULLSCREEN,
	GRAPHICOPTION_LOWRES_TEXTURES,
	GRAPHICOPTION_HIRES_TERRAIN,
	GRAPHICOPTION_NO_MOVIES,
	GRAPHICOPTION_CITY_RADIUS,
ENUM_END(GraphicOption, GRAPHICOPTION)

ENUM_START(ForceControl, FORCECONTROL)
	FORCECONTROL_SPEED,
	FORCECONTROL_HANDICAP,
	FORCECONTROL_OPTIONS,
	FORCECONTROL_VICTORIES,
	FORCECONTROL_MAX_TURNS,
	FORCECONTROL_MAX_CITY_ELIMINATION,
	FORCECONTROL_ADVANCED_START,
ENUM_END(ForceControl, FORCECONTROL)

ENUM_START(CitySize, CITYSIZE)
	CITYSIZE_SMALL,
	CITYSIZE_MEDIUM,
	CITYSIZE_LARGE,
ENUM_END(CitySize, CITYSIZE)

ENUM_START(VoiceTarget, VOICETARGET)
	VOICETARGET_DIPLO,
	VOICETARGET_TEAM,
	VOICETARGET_ALL,
ENUM_END(VoiceTarget, VOICETARGET)

ENUM_START(Order, ORDER)
	ORDER_TRAIN,
	ORDER_CONSTRUCT,
	ORDER_CREATE,
	ORDER_MAINTAIN,
ENUM_END(Order, ORDER)

ENUM_START(Task, TASK)
	TASK_RAZE,
	TASK_DISBAND,
	TASK_GIFT,
	TASK_SET_AUTOMATED_CITIZENS,
	TASK_SET_AUTOMATED_PRODUCTION,
	TASK_SET_EMPHASIZE,
	TASK_CHANGE_SPECIALIST,
	TASK_CHANGE_WORKING_PLOT,
	TASK_CLEAR_WORKING_OVERRIDE,
	TASK_HURRY,
	TASK_CONSCRIPT,
	TASK_CLEAR_ORDERS,
	TASK_RALLY_PLOT,
	TASK_CLEAR_RALLY_PLOT,
	TASK_LIBERATE,
	TASK_CEDE, // advc.ctr
ENUM_END(Task, TASK)

ENUM_START(Axis, AXIS)
	AXIS_X,
	AXIS_Y,
	AXIS_Z,
ENUM_END(Axis, AXIS)

ENUM_START(SpaceShipInfo, SPACE_SHIP_INFO_TYPE)
	SPACE_SHIP_INFO_TYPE_NONE,
	SPACE_SHIP_INFO_TYPE_FILENAME,
	SPACE_SHIP_INFO_TYPE_ALPHA_CENTAURI,
	SPACE_SHIP_INFO_TYPE_LAUNCH,
	SPACE_SHIP_INFO_TYPE_LAUNCHED,
	SPACE_SHIP_INFO_TYPE_ZOOM_IN,
	SPACE_SHIP_INFO_TYPE_ZOOM_MOVE,
	SPACE_SHIP_INFO_TYPE_COMPONENT_OFF,
	SPACE_SHIP_INFO_TYPE_COMPONENT_PREVIEW,
	SPACE_SHIP_INFO_TYPE_COMPONENT_APPEAR,
	SPACE_SHIP_INFO_TYPE_COMPONENT_ON,
	SPACE_SHIP_INFO_TYPE_LIGHT_OFF,
	SPACE_SHIP_INFO_TYPE_GANTRY_SMOKE_ON,
	SPACE_SHIP_INFO_TYPE_IN_SPACE_SMOKE_ON,
	SPACE_SHIP_INFO_TYPE_IN_GAME_SMOKE_ON,
ENUM_END(SpaceShipInfo, SPACE_SHIP_INFO_TYPE)

ENUM_START(InfoBar, INFOBAR)
	INFOBAR_STORED,
	INFOBAR_RATE,
	INFOBAR_RATE_EXTRA,
	INFOBAR_EMPTY,
ENUM_END(InfoBar, INFOBAR)

ENUM_START(HealthBar, HEALTHBAR)
	HEALTHBAR_ALIVE_ATTACK,
	HEALTHBAR_ALIVE_DEFEND,
	HEALTHBAR_DEAD,
ENUM_END(HealthBar, HEALTHBAR)

ENUM_START(Calendar, CALENDAR)
	CALENDAR_DEFAULT,
	CALENDAR_BI_YEARLY,
	CALENDAR_YEARS,
	CALENDAR_TURNS,
	CALENDAR_SEASONS,
	CALENDAR_MONTHS,
	CALENDAR_WEEKS,
ENUM_END(Calendar, CALENDAR)

ENUM_START(Denial, DENIAL)
	DENIAL_UNKNOWN,
	DENIAL_NEVER,
	DENIAL_TOO_MUCH,
	DENIAL_MYSTERY,
	DENIAL_JOKING,
	DENIAL_ANGER_CIVIC,
	DENIAL_FAVORITE_CIVIC,
	DENIAL_MINORITY_RELIGION,
	DENIAL_CONTACT_THEM,
	DENIAL_VICTORY,
	DENIAL_ATTITUDE,
	DENIAL_ATTITUDE_THEM,
	DENIAL_TECH_WHORE,
	DENIAL_TECH_MONOPOLY,
	DENIAL_POWER_US,
	DENIAL_POWER_YOU,
	DENIAL_POWER_THEM,
	DENIAL_TOO_MANY_WARS,
	DENIAL_NO_GAIN,
	DENIAL_NOT_ALLIED,
	DENIAL_RECENT_CANCEL,
	DENIAL_WORST_ENEMY,
	DENIAL_POWER_YOUR_ENEMIES,
	DENIAL_TOO_FAR,
	DENIAL_VASSAL,
	DENIAL_WAR_NOT_POSSIBLE_US,
	DENIAL_WAR_NOT_POSSIBLE_YOU,
	DENIAL_PEACE_NOT_POSSIBLE_US,
	DENIAL_PEACE_NOT_POSSIBLE_YOU,
	DENIAL_TRUE_ATTITUDE, // advc.130v
	DENIAL_NO_CURRENT_THREAT, // advc.112b
ENUM_END(Denial, DENIAL)
// advc.104m:
ENUM_START(AIDemand, AI_DEMAND)
	DEMAND_GOLD,
	DEMAND_MAP,
	DEMAND_TECH,
	DEMAND_BONUS,
	DEMAND_GOLD_PER_TURN,
	DEMAND_CITY, // advc.ctr
ENUM_END(AIDemand, AI_DEMAND)

ENUM_START(Domain, DOMAIN)
	DOMAIN_SEA,
	DOMAIN_AIR,
	DOMAIN_LAND,
	DOMAIN_IMMOBILE,
ENUM_END(Domain, DOMAIN)

ENUM_START(UnitAI, UNITAI)
	UNITAI_UNKNOWN,
	UNITAI_ANIMAL,
	UNITAI_SETTLE,
	UNITAI_WORKER,
	UNITAI_ATTACK,
	UNITAI_ATTACK_CITY,
	UNITAI_COLLATERAL,
	UNITAI_PILLAGE,
	UNITAI_RESERVE,
	UNITAI_COUNTER,
	UNITAI_CITY_DEFENSE,
	UNITAI_CITY_COUNTER,
	UNITAI_CITY_SPECIAL,
	UNITAI_EXPLORE,
	UNITAI_MISSIONARY,
	UNITAI_PROPHET,
	UNITAI_ARTIST,
	UNITAI_SCIENTIST,
	UNITAI_GENERAL,
	UNITAI_MERCHANT,
	UNITAI_ENGINEER,
	UNITAI_GREAT_SPY, // K-Mod
	UNITAI_SPY,
	UNITAI_ICBM,
	UNITAI_WORKER_SEA,
	UNITAI_ATTACK_SEA,
	UNITAI_RESERVE_SEA,
	UNITAI_ESCORT_SEA,
	UNITAI_EXPLORE_SEA,
	UNITAI_ASSAULT_SEA,
	UNITAI_SETTLER_SEA,
	UNITAI_MISSIONARY_SEA,
	UNITAI_SPY_SEA,
	UNITAI_CARRIER_SEA,
	UNITAI_MISSILE_CARRIER_SEA,
	UNITAI_PIRATE_SEA,
	UNITAI_ATTACK_AIR,
	UNITAI_DEFENSE_AIR,
	UNITAI_CARRIER_AIR,
	UNITAI_MISSILE_AIR,
	UNITAI_PARADROP,
	UNITAI_ATTACK_CITY_LEMMING,
ENUM_END(UnitAI, UNITAI)

ENUM_START(Probability, PROBABILITY)
	PROBABILITY_LOW,
	PROBABILITY_REAL,
	PROBABILITY_HIGH,
ENUM_END(Probability, PROBABILITY)

ENUM_START(Activity, ACTIVITY)
	ACTIVITY_AWAKE,
	ACTIVITY_HOLD,
	ACTIVITY_SLEEP,
	ACTIVITY_HEAL,
	ACTIVITY_SENTRY,
	ACTIVITY_INTERCEPT,
	ACTIVITY_MISSION,
	ACTIVITY_PATROL,
	ACTIVITY_PLUNDER,
	ACTIVITY_BOARDED, // advc.075
ENUM_END(Activity, ACTIVITY)

ENUM_START(Automate, AUTOMATE)
	AUTOMATE_BUILD,
	AUTOMATE_NETWORK,
	AUTOMATE_CITY,
	AUTOMATE_EXPLORE,
	AUTOMATE_RELIGION,
	// Any additions need to be reflected in GlobalTypes.xml
ENUM_END(Automate, AUTOMATE)

ENUM_START(Mission, MISSION)
	MISSION_MOVE_TO,
	MISSION_ROUTE_TO,
	MISSION_MOVE_TO_UNIT,
	MISSION_SKIP,
	MISSION_SLEEP,
	MISSION_FORTIFY,
	MISSION_PLUNDER,
	MISSION_AIRPATROL,
	MISSION_SEAPATROL,
	MISSION_HEAL,
	MISSION_SENTRY,
	MISSION_AIRLIFT,
	MISSION_NUKE,
	MISSION_RECON,
	MISSION_PARADROP,
	MISSION_AIRBOMB,
	MISSION_RANGE_ATTACK,
	MISSION_BOMBARD,
	MISSION_PILLAGE,
	MISSION_SABOTAGE,
	MISSION_DESTROY,
	MISSION_STEAL_PLANS,
	MISSION_FOUND,
	MISSION_SPREAD,
	MISSION_SPREAD_CORPORATION,
	MISSION_JOIN,
	MISSION_CONSTRUCT,
	MISSION_DISCOVER,
	MISSION_HURRY,
	MISSION_TRADE,
	MISSION_GREAT_WORK,
	MISSION_INFILTRATE,
	MISSION_GOLDEN_AGE,
	MISSION_BUILD,
	MISSION_LEAD,
	MISSION_ESPIONAGE,
	MISSION_DIE_ANIMATION,

	MISSION_BEGIN_COMBAT,
	MISSION_END_COMBAT,
	MISSION_AIRSTRIKE,
	MISSION_SURRENDER,
	MISSION_CAPTURED,
	MISSION_IDLE,
	MISSION_DIE,
	MISSION_DAMAGE,
	MISSION_MULTI_SELECT,
	MISSION_MULTI_DESELECT,

	MISSION_SENTRY_HEAL, // advc.004l
	// Any additions need to be reflected in Civ4MissionInfos.xml
ENUM_END(Mission, MISSION)

ENUM_START(MissionAI, MISSIONAI)
	MISSIONAI_SHADOW,
	MISSIONAI_GROUP,
	MISSIONAI_LOAD_ASSAULT,
	MISSIONAI_LOAD_SETTLER,
	MISSIONAI_LOAD_SPECIAL,
	MISSIONAI_GUARD_CITY,
	MISSIONAI_GUARD_BONUS,
	//MISSIONAI_GUARD_TRADE_NET,
	MISSIONAI_GUARD_COAST, // K-Mod
	MISSIONAI_GUARD_SPY,
	MISSIONAI_ATTACK_SPY,
	MISSIONAI_RECON_SPY, // K-Mod
	MISSIONAI_SPREAD,
	MISSIONAI_SPREAD_CORPORATION,
	MISSIONAI_JOIN_CITY, // K-Mod
	MISSIONAI_CONSTRUCT,
	MISSIONAI_HURRY,
	MISSIONAI_TRADE, // K-Mod
	MISSIONAI_GREAT_WORK,
	MISSIONAI_INFILTRATE, // K-Mod
	MISSIONAI_EXPLORE,
	MISSIONAI_BLOCKADE,
	MISSIONAI_PILLAGE,
	MISSIONAI_FOUND,
	MISSIONAI_BUILD,
	MISSIONAI_ASSAULT, // K-Mod note: this is now used for land forces targeting a city as well as sea forces.
	MISSIONAI_CARRIER,
	MISSIONAI_PICKUP,
	// K-Mod
	MISSIONAI_REINFORCE, // (ie. transporting units to a new area)
	MISSIONAI_CHOKE,
	MISSIONAI_HEAL,
	MISSIONAI_RETREAT,
	MISSIONAI_PATROL,
	MISSIONAI_DEFEND,
	MISSIONAI_COUNTER_ATTACK,
	MISSIONAI_UPGRADE,
	MISSIONAI_STRANDED,
	// MISSIONAI_GOLDEN_AGE, // ie. waiting for more golden age units.
	// K-Mod end
ENUM_END(MissionAI, MISSIONAI)

ENUM_START(Command, COMMAND)
	COMMAND_PROMOTION,
	COMMAND_UPGRADE,
	COMMAND_AUTOMATE,
	COMMAND_WAKE,
	COMMAND_CANCEL,
	COMMAND_CANCEL_ALL,
	COMMAND_STOP_AUTOMATION,
	COMMAND_DELETE,
	COMMAND_GIFT,
	COMMAND_LOAD,
	COMMAND_LOAD_UNIT,
	COMMAND_UNLOAD,
	COMMAND_UNLOAD_ALL,
	COMMAND_HOTKEY,
	// Any additions need to be reflected in Civ4CommandInfos.xml
ENUM_END(Command, COMMAND)

ENUM_START(Control, CONTROL)
	CONTROL_CENTERONSELECTION,
	CONTROL_SELECTYUNITTYPE,
	CONTROL_SELECTYUNITALL,
	CONTROL_SELECTCITY,
	CONTROL_SELECTCAPITAL,
	CONTROL_NEXTCITY,
	CONTROL_PREVCITY,
	CONTROL_NEXTUNIT,
	CONTROL_PREVUNIT,
	CONTROL_CYCLEUNIT,
	CONTROL_CYCLEUNIT_ALT,
	CONTROL_CYCLEWORKER,
	CONTROL_LASTUNIT,
	CONTROL_ENDTURN,
	CONTROL_ENDTURN_ALT,
	CONTROL_FORCEENDTURN,
	CONTROL_AUTOMOVES,
	CONTROL_PING,
	CONTROL_SIGN,
	CONTROL_GRID,
	CONTROL_BARE_MAP,
	CONTROL_YIELDS,
	CONTROL_RESOURCE_ALL,
	CONTROL_UNIT_ICONS,
	CONTROL_GLOBELAYER,
	CONTROL_SCORES,
	CONTROL_LOAD_GAME,
	CONTROL_OPTIONS_SCREEN,
	CONTROL_RETIRE,
	CONTROL_SAVE_GROUP,
	CONTROL_SAVE_NORMAL,
	CONTROL_QUICK_SAVE,
	CONTROL_QUICK_LOAD,
	CONTROL_ORTHO_CAMERA,
	CONTROL_CYCLE_CAMERA_FLYING_MODES,
	CONTROL_ISOMETRIC_CAMERA_LEFT,
	CONTROL_ISOMETRIC_CAMERA_RIGHT,
	CONTROL_FLYING_CAMERA,
	CONTROL_MOUSE_FLYING_CAMERA,
	CONTROL_TOP_DOWN_CAMERA,
	CONTROL_CIVILOPEDIA,
	CONTROL_RELIGION_SCREEN,
	CONTROL_CORPORATION_SCREEN,
	CONTROL_CIVICS_SCREEN,
	CONTROL_FOREIGN_SCREEN,
	CONTROL_FINANCIAL_SCREEN,
	CONTROL_MILITARY_SCREEN,
	CONTROL_TECH_CHOOSER,
	CONTROL_TURN_LOG,
	CONTROL_CHAT_ALL,
	CONTROL_CHAT_TEAM,
	CONTROL_DOMESTIC_SCREEN,
	CONTROL_VICTORY_SCREEN,
	CONTROL_INFO,
	CONTROL_GLOBE_VIEW,
	CONTROL_DETAILS,
	CONTROL_ADMIN_DETAILS,
	CONTROL_HALL_OF_FAME,
	CONTROL_WORLD_BUILDER,
	CONTROL_DIPLOMACY,
	CONTROL_SELECT_HEALTHY,
	CONTROL_ESPIONAGE_SCREEN,
	CONTROL_FREE_COLONY,
	CONTROL_UNSELECT_ALL, // advc.154
	// Any additions need to be reflected in XML\Units\Civ4ControlInfos.xml
ENUM_END(Control, CONTROL)

ENUM_START(WarPlan, WARPLAN)
	WARPLAN_ATTACKED_RECENT,
	WARPLAN_ATTACKED,
	WARPLAN_PREPARING_LIMITED,
	WARPLAN_PREPARING_TOTAL,
	WARPLAN_LIMITED,
	WARPLAN_TOTAL,
	WARPLAN_DOGPILE,
ENUM_END(WarPlan, WARPLAN)

ENUM_START(AreaAI, AREAAI)
	AREAAI_OFFENSIVE,
	AREAAI_DEFENSIVE,
	AREAAI_MASSING,
	AREAAI_ASSAULT,
	AREAAI_ASSAULT_MASSING,
	AREAAI_ASSAULT_ASSIST,
	AREAAI_NEUTRAL,
ENUM_END(AreaAI, AREAAI)

ENUM_START(FogOfWarMode, FOGOFWARMODE)
	FOGOFWARMODE_OFF,
	FOGOFWARMODE_UNEXPLORED,
	FOGOFWARMODE_NOVIS,
ENUM_END(FogOfWarMode, FOGOFWARMODE)

ENUM_START(CameraOverlay, CAMERA_OVERLAY)
	CAMERA_OVERLAY_DECAL,
	CAMERA_OVERLAY_ADDITIVE,
ENUM_END(CameraOverlay, CAMERA_OVERLAY)

ENUM_START(FOWUpdate, FOW_UPDATE)
	FOW_UPDATE_REGULAR,
	FOW_UPDATE_IMMEDIATE,
	FOW_UPDATE_UNDO_IMMEDIATE,
	FOW_UPDATE_FORCE_CHANGE,
ENUM_END(FOWUpdate, FOW_UPDATE)

ENUM_START(Function, FUNC)
	FUNC_NOINTERP,	// NiAnimationKey::NOINTERP,
	FUNC_LINKEY,	//	= NiAnimationKey::LINKEY,
	FUNC_BEZKEY,	//	= NiAnimationKey::BEZKEY,
	FUNC_TCBKEY,	// = NiAnimationKey::TCBKEY,
	FUNC_EULERKEY,	// = NiAnimationKey::EULERKEY,
	FUNC_STEPKEY,	// = NiAnimationKey::STEPKEY,
ENUM_END(Function, FUNC)

enum TradeableItems
{
	NO_TRADE_ITEM = -1,
	TRADE_ITEM_NONE = NO_TRADE_ITEM,
	TRADE_GOLD,
	TRADE_GOLD_PER_TURN,
	TRADE_MAPS,
	TRADE_VASSAL,
	TRADE_SURRENDER,
	TRADE_OPEN_BORDERS,
	TRADE_DEFENSIVE_PACT,
	TRADE_PERMANENT_ALLIANCE,
	TRADE_PEACE_TREATY,
#ifdef _USRDLL
	/*NUM_BASIC_ITEMS,
	TRADE_TECHNOLOGIES = NUM_BASIC_ITEMS,*/
	// advc: Switch this so that TRADE_TECHNOLOGIES is shown in Visual Studio
	TRADE_TECHNOLOGIES,
	NUM_BASIC_ITEMS = TRADE_TECHNOLOGIES,
#else
	TRADE_TECHNOLOGIES,
#endif
	TRADE_RESOURCES,
	TRADE_CITIES,
	TRADE_PEACE,
	TRADE_WAR,
	TRADE_EMBARGO,
	TRADE_CIVIC,
	TRADE_RELIGION,
#ifdef _USRDLL
	NUM_TRADEABLE_HEADINGS,
	NUM_ENUM_TYPES(TRADE_ITEM) = NUM_TRADEABLE_HEADINGS, // advc.enum
	NUM_TRADEABLE_ITEMS = NUM_TRADEABLE_HEADINGS,
#endif
	/*  advc.034: Don't need to include this in iterations over TradeableItems
		(although I suppose it wouldn't hurt) */
	TRADE_DISENGAGE,
}; /* advc.enum: Need a more regular name for this enum, but the enum itself
	  can't be renamed b/c it's used in the signatures of DLL-exported functions. */
typedef TradeableItems TradeItemTypes;

ENUM_START(DiploEvent, DIPLOEVENT)
	DIPLOEVENT_CONTACT,
	DIPLOEVENT_AI_CONTACT,
	DIPLOEVENT_FAILED_CONTACT,
	DIPLOEVENT_GIVE_HELP,
	DIPLOEVENT_REFUSED_HELP,
	DIPLOEVENT_ACCEPT_DEMAND,
	DIPLOEVENT_REJECTED_DEMAND,
	DIPLOEVENT_DEMAND_WAR,
	DIPLOEVENT_CONVERT,
	DIPLOEVENT_NO_CONVERT,
	DIPLOEVENT_REVOLUTION,
	DIPLOEVENT_NO_REVOLUTION,
	DIPLOEVENT_JOIN_WAR,
	DIPLOEVENT_NO_JOIN_WAR,
	DIPLOEVENT_STOP_TRADING,
	DIPLOEVENT_NO_STOP_TRADING,
	DIPLOEVENT_ASK_HELP,
	DIPLOEVENT_MADE_DEMAND,
	DIPLOEVENT_RESEARCH_TECH,
	DIPLOEVENT_TARGET_CITY,
	DIPLOEVENT_MADE_DEMAND_VASSAL,
	DIPLOEVENT_SET_WARPLAN, // K-Mod
ENUM_END(DiploEvent, DIPLOEVENT)

ENUM_START(NetContact, NETCONTACT)
	NETCONTACT_INITIAL,
	NETCONTACT_RESPONSE,
	NETCONTACT_ESTABLISHED,
	NETCONTACT_BUSY,
ENUM_END(NetContact, NETCONTACT)

ENUM_START(Contact, CONTACT)
	CONTACT_RELIGION_PRESSURE,
	CONTACT_CIVIC_PRESSURE,
	CONTACT_JOIN_WAR,
	CONTACT_STOP_TRADING,
	CONTACT_GIVE_HELP,
	CONTACT_ASK_FOR_HELP,
	CONTACT_DEMAND_TRIBUTE,
	CONTACT_OPEN_BORDERS,
	CONTACT_DEFENSIVE_PACT,
	CONTACT_PERMANENT_ALLIANCE,
	CONTACT_PEACE_TREATY,
	CONTACT_TRADE_TECH,
	CONTACT_TRADE_BONUS,
	CONTACT_TRADE_MAP,
	// Any additions need to be reflected in GlobalTypes.xml
ENUM_END(Contact, CONTACT)

ENUM_START(Memory, MEMORY)
	MEMORY_DECLARED_WAR,
	MEMORY_DECLARED_WAR_ON_FRIEND,
	MEMORY_HIRED_WAR_ALLY,
	MEMORY_NUKED_US,
	MEMORY_NUKED_FRIEND,
	MEMORY_RAZED_CITY,
	MEMORY_RAZED_HOLY_CITY,
	MEMORY_SPY_CAUGHT,
	MEMORY_GIVE_HELP,
	MEMORY_REFUSED_HELP,
	MEMORY_ACCEPT_DEMAND,
	MEMORY_REJECTED_DEMAND,
	MEMORY_ACCEPTED_RELIGION,
	MEMORY_DENIED_RELIGION,
	MEMORY_ACCEPTED_CIVIC,
	MEMORY_DENIED_CIVIC,
	MEMORY_ACCEPTED_JOIN_WAR,
	MEMORY_DENIED_JOIN_WAR,
	MEMORY_ACCEPTED_STOP_TRADING,
	MEMORY_DENIED_STOP_TRADING,
	MEMORY_STOPPED_TRADING,
	MEMORY_STOPPED_TRADING_RECENT,
	MEMORY_HIRED_TRADE_EMBARGO,
	MEMORY_MADE_DEMAND,
	MEMORY_CANCELLED_VASSAL_AGREEMENT, // advc.143
	MEMORY_MADE_DEMAND_RECENT,
	MEMORY_CANCELLED_OPEN_BORDERS,
	MEMORY_CANCELLED_DEFENSIVE_PACT, // advc.130p
	MEMORY_TRADED_TECH_TO_US,
	MEMORY_RECEIVED_TECH_FROM_ANY,
	MEMORY_VOTED_AGAINST_US,
	MEMORY_VOTED_FOR_US,
	MEMORY_EVENT_GOOD_TO_US,
	MEMORY_EVENT_BAD_TO_US,
	MEMORY_LIBERATED_CITIES,
	MEMORY_INDEPENDENCE, // advc.130r
	MEMORY_DECLARED_WAR_RECENT, // advc.104i
ENUM_END(Memory, MEMORY)

ENUM_START(Attitude, ATTITUDE)
	ATTITUDE_FURIOUS,
	ATTITUDE_ANNOYED,
	ATTITUDE_CAUTIOUS,
	ATTITUDE_PLEASED,
	ATTITUDE_FRIENDLY,
ENUM_END(Attitude, ATTITUDE)

ENUM_START(DiplomacyPower, DIPLOMACYPOWER)
	DIPLOMACYPOWER_WEAKER,
	DIPLOMACYPOWER_EQUAL,
	DIPLOMACYPOWER_STRONGER,
ENUM_END(DiplomacyPower, DIPLOMACYPOWER)
// <advc.139>
ENUM_START(CitySafety, CITYSAFETY)
	CITYSAFETY_EVACUATING,
	CITYSAFETY_THREATENED,
	CITYSAFETY_SAFE,
	CITYSAFETY_PERFECT, // for advc.ctr
ENUM_END(CitySafety, CITYSAFETY) // </advc.139>

ENUM_START(Feat, FEAT)
	FEAT_UNITCOMBAT_ARCHER,
	FEAT_UNITCOMBAT_MOUNTED,
	FEAT_UNITCOMBAT_MELEE,
	FEAT_UNITCOMBAT_SIEGE,
	FEAT_UNITCOMBAT_GUN,
	FEAT_UNITCOMBAT_ARMOR,
	FEAT_UNITCOMBAT_HELICOPTER,
	FEAT_UNITCOMBAT_NAVAL,
	FEAT_UNIT_PRIVATEER,
	FEAT_UNIT_SPY,
	FEAT_NATIONAL_WONDER,
	FEAT_TRADE_ROUTE,
	FEAT_COPPER_CONNECTED,
	FEAT_HORSE_CONNECTED,
	FEAT_IRON_CONNECTED,
	FEAT_LUXURY_CONNECTED,
	FEAT_FOOD_CONNECTED,
	FEAT_POPULATION_HALF_MILLION,
	FEAT_POPULATION_1_MILLION,
	FEAT_POPULATION_2_MILLION,
	FEAT_POPULATION_5_MILLION,
	FEAT_POPULATION_10_MILLION,
	FEAT_POPULATION_20_MILLION,
	FEAT_POPULATION_50_MILLION,
	FEAT_POPULATION_100_MILLION,
	FEAT_POPULATION_200_MILLION,
	FEAT_POPULATION_500_MILLION,
	FEAT_POPULATION_1_BILLION,
	FEAT_POPULATION_2_BILLION,
	FEAT_CORPORATION_ENABLED,
	FEAT_PAD,
ENUM_END(Feat, FEAT)

ENUM_START(SaveGame, SAVEGAME)
	SAVEGAME_NONE = -1,
	SAVEGAME_AUTO,
	SAVEGAME_RECOVERY,
	SAVEGAME_QUICK,
	SAVEGAME_NORMAL,
	SAVEGAME_GROUP,
	SAVEGAME_DROP_QUIT,
	SAVEGAME_DROP_CONTINUE,
	SAVEGAME_PBEM,
	SAVEGAME_REPLAY,
ENUM_END(SaveGame, SAVEGAME)

ENUM_START(MenuScreen, MENU_SCREEN)
	MENU_SCREEN_STANDARD,
	MENU_SCREEN_BASELOBBY,
	MENU_SCREEN_BASE_SCENARIO,
	MENU_SCREEN_JOIN,
	MENU_SCREEN_BASE_LOAD,
	MENU_SCREEN_LAUNCHING,
	MENU_SCREEN_BASE_INIT,

	MENU_SCREEN_OPENING_MENU,
	MENU_SCREEN_MOD_MENU,

	MENU_SCREEN_GS_BUDDYLIST,
	MENU_SCREEN_GS_CHATROOM,
	MENU_SCREEN_GS_CHANNEL,
	MENU_SCREEN_GS_CHOOSE_SCENARIO,
	MENU_SCREEN_GS_SCENARIO,
	MENU_SCREEN_GS_NAVBAR,
	MENU_SCREEN_GS_LOAD_STAGING,
	MENU_SCREEN_GS_MOTD,
	MENU_SCREEN_GS_LOGIN,
	MENU_SCREEN_GS_LOAD,
	MENU_SCREEN_GS_JOIN,
	MENU_SCREEN_GS_INIT,
	MENU_SCREEN_GS_CUSTOM_GAMES,

	MENU_SCREEN_LANLOBBY,
	MENU_SCREEN_MP_CHOOSE_SCENARIO,
	MENU_SCREEN_MP_SCENARIO,
	MENU_SCREEN_MP_LOAD_STAGING,
	MENU_SCREEN_MP_LOAD,
	MENU_SCREEN_MP_INIT,
	MENU_SCREEN_MP_CHOICES,
	MENU_SCREEN_MP_JOIN,

	MENU_SCREEN_SP_WORLD_SIZE,
	MENU_SCREEN_SP_SCENARIO,
	MENU_SCREEN_SP_LOAD,
	MENU_SCREEN_SP_INIT,
	MENU_SCREEN_SP_CHOICES,
	MENU_SCREEN_SP_ADVANCED_LOAD,
	MENU_SCREEN_SP_SIMPLE_CIV_PICKER,
	MENU_SCREEN_SP_REPLAY,
	MENU_SCREEN_SP_MAP_SCRIPT,
	MENU_SCREEN_SP_DIFFICULTY,
ENUM_END(MenuScreen, MENU_SCREEN)

ENUM_START(Load, LOAD)
	LOAD_NORMAL,
	LOAD_INIT,
	LOAD_SETUP,
	LOAD_GAMETYPE,
	LOAD_REPLAY,
	LOAD_NORMAL_AND_GAMETYPE,
ENUM_END(Load, LOAD)
typedef LoadTypes LoadType;

ENUM_START(EventContext, EVENTCONTEXT)
	EVENTCONTEXT_SELF,
	EVENTCONTEXT_ALL,
ENUM_END(EventContext, EVENTCONTEXT)

ENUM_START(Version, VERSIONTYPE)
	VERSIONTYPE_EXE,
	VERSIONTYPE_DLL,
	VERSIONTYPE_SHADERS,
	VERSIONTYPE_PYTHON,
	VERSIONTYPE_XML,
ENUM_END(Version, VERSIONTYPE)

ENUM_START(VoteResult, VOTERESULT)
	VOTERESULT_MAJORITY,
	VOTERESULT_UNANIMOUS,
ENUM_END(VoteResult, VOTERESULT)

ENUM_START(ReplayMessage, REPLAY_MESSAGE)
	REPLAY_MESSAGE_MAJOR_EVENT,
	REPLAY_MESSAGE_CITY_FOUNDED,
	REPLAY_MESSAGE_PLOT_OWNER_CHANGE,
ENUM_END(ReplayMessage, REPLAY_MESSAGE)

ENUM_START(CivilopediaPage, CIVILOPEDIA_PAGE)
	CIVILOPEDIA_PAGE_TECH,
	CIVILOPEDIA_PAGE_UNIT,
	CIVILOPEDIA_PAGE_BUILDING,
	CIVILOPEDIA_PAGE_WONDER,
	CIVILOPEDIA_PAGE_TERRAIN,
	CIVILOPEDIA_PAGE_FEATURE,
	CIVILOPEDIA_PAGE_BONUS,
	CIVILOPEDIA_PAGE_IMPROVEMENT,
	CIVILOPEDIA_PAGE_SPECIALIST,
	CIVILOPEDIA_PAGE_PROMOTION,
	CIVILOPEDIA_PAGE_UNIT_GROUP,
	CIVILOPEDIA_PAGE_CIV,
	CIVILOPEDIA_PAGE_LEADER,
	CIVILOPEDIA_PAGE_RELIGION,
	CIVILOPEDIA_PAGE_CORPORATION,
	CIVILOPEDIA_PAGE_CIVIC,
	CIVILOPEDIA_PAGE_PROJECT,
	CIVILOPEDIA_PAGE_CONCEPT,
	CIVILOPEDIA_PAGE_CONCEPT_NEW,
	CIVILOPEDIA_PAGE_HINTS,
ENUM_END(CivilopediaPage, CIVILOPEDIA_PAGE)

// advc (caveat): Should add only to the end of this enum
ENUM_START(GameMessage, GAMEMESSAGE)
	/*	advc (note): These are presumably used by the EXE during
		game start. I don't think they pass through the DLL at all. */
		GAMEMESSAGE_NETWORK_READY,
		GAMEMESSAGE_SAVE_GAME_FLAG,
		GAMEMESSAGE_SAVE_FLAG_ACK,
		GAMEMESSAGE_VERIFY_VERSION,
		GAMEMESSAGE_VERSION_NACK,
		GAMEMESSAGE_VERSION_WARNING,
		GAMEMESSAGE_GAME_TYPE,
		GAMEMESSAGE_ID_ASSIGNMENT,
		GAMEMESSAGE_FILE_INFO,
		GAMEMESSAGE_PICK_YOUR_CIV,
		GAMEMESSAGE_CIV_CHOICE,
		GAMEMESSAGE_CONFIRM_CIV_CLAIM,
		GAMEMESSAGE_CLAIM_INFO,
		GAMEMESSAGE_CIV_CHOICE_ACK,
		GAMEMESSAGE_CIV_CHOICE_NACK,
		GAMEMESSAGE_CIV_CHOSEN,
		GAMEMESSAGE_INTERIM_NOTICE,
		GAMEMESSAGE_INIT_INFO,
		GAMEMESSAGE_MAPSCRIPT_CHECK,
		GAMEMESSAGE_MAPSCRIPT_ACK,
		GAMEMESSAGE_LOAD_GAME,
		GAMEMESSAGE_PLAYER_ID,
		GAMEMESSAGE_SLOT_REASSIGNMENT,
		GAMEMESSAGE_PLAYER_INFO,
		GAMEMESSAGE_GAME_INFO,
		GAMEMESSAGE_REASSIGN_PLAYER,
		GAMEMESSAGE_PITBOSS_INFO,
		GAMEMESSAGE_LAUNCHING_INFO,
		GAMEMESSAGE_INIT_GAME,
		GAMEMESSAGE_INIT_PLAYERS,
		GAMEMESSAGE_AUTH_REQUEST,
		GAMEMESSAGE_AUTH_RESPONSE,
		GAMEMESSAGE_SYNCH_START,
		GAMEMESSAGE_PLAYER_OPTION, // (end of external enumerators)
	GAMEMESSAGE_EXTENDED_GAME,
	GAMEMESSAGE_AUTO_MOVES,
	GAMEMESSAGE_TURN_COMPLETE,
	GAMEMESSAGE_JOIN_GROUP,
	GAMEMESSAGE_PUSH_MISSION,
	GAMEMESSAGE_AUTO_MISSION,
	GAMEMESSAGE_DO_COMMAND,
	GAMEMESSAGE_PUSH_ORDER,
	GAMEMESSAGE_POP_ORDER,
	GAMEMESSAGE_DO_TASK,
	GAMEMESSAGE_RESEARCH,
	GAMEMESSAGE_PERCENT_CHANGE,
	GAMEMESSAGE_ESPIONAGE_CHANGE,
	GAMEMESSAGE_CONVERT,
	// advc (note): Meta game stuff. Not used within the DLL except for PING.
		GAMEMESSAGE_CHAT,
	GAMEMESSAGE_PING,
		GAMEMESSAGE_SIGN,
		GAMEMESSAGE_LINE_ENTITY,
		GAMEMESSAGE_SIGN_DELETE,
		GAMEMESSAGE_LINE_ENTITY_DELETE,
		GAMEMESSAGE_LINE_GROUP_DELETE,
		GAMEMESSAGE_PAUSE,
		GAMEMESSAGE_MP_KICK,
		GAMEMESSAGE_MP_RETIRE,
		GAMEMESSAGE_CLOSE_CONNECTION,
		GAMEMESSAGE_NEVER_JOINED,
		GAMEMESSAGE_MP_DROP_INIT,
		GAMEMESSAGE_MP_DROP_VOTE,
		GAMEMESSAGE_MP_DROP_UPDATE,
		GAMEMESSAGE_MP_DROP_RESULT,
		GAMEMESSAGE_MP_DROP_SAVE,
		GAMEMESSAGE_TOGGLE_TRADE,
		GAMEMESSAGE_IMPLEMENT_OFFER, // (end of external enumerators)
	GAMEMESSAGE_CHANGE_WAR,
	GAMEMESSAGE_CHANGE_VASSAL,
	GAMEMESSAGE_CHOOSE_ELECTION,
	GAMEMESSAGE_DIPLO_VOTE,
	// advc (note): Not used within the DLL except UPDATE_CIVICS. Trade screen stuff.
		GAMEMESSAGE_APPLY_EVENT,
		GAMEMESSAGE_CONTACT_CIV,
		GAMEMESSAGE_DIPLO_CHAT,
		GAMEMESSAGE_SEND_OFFER,
		GAMEMESSAGE_DIPLO_EVENT,
		GAMEMESSAGE_RENEGOTIATE,
		GAMEMESSAGE_RENEGOTIATE_ITEM,
		GAMEMESSAGE_EXIT_TRADE,
		GAMEMESSAGE_KILL_DEAL,
		GAMEMESSAGE_SAVE_GAME,
	GAMEMESSAGE_UPDATE_CIVICS,
		GAMEMESSAGE_CLEAR_TABLE,
		GAMEMESSAGE_POPUP_PROCESSED,
		GAMEMESSAGE_DIPLOMACY_PROCESSED,
		GAMEMESSAGE_HOT_JOIN_NOTICE,
		GAMEMESSAGE_HOT_DROP_NOTICE,
		GAMEMESSAGE_DIPLOMACY,
		GAMEMESSAGE_POPUP, // (end of external enumerators)
	GAMEMESSAGE_EVENT_TRIGGERED,
	GAMEMESSAGE_EMPIRE_SPLIT,
	GAMEMESSAGE_LAUNCH_SPACESHIP,
	GAMEMESSAGE_ADVANCED_START_ACTION,
	GAMEMESSAGE_FOUND_RELIGION,
	GAMEMESSAGE_MOD_NET_MESSAGE,
	GAMEMESSAGE_PUSH_MODIFIED_MISSION, // advc.011b
	GAMEMESSAGE_FP_TEST, // advc.003g
ENUM_END(GameMessage, GAMEMESSAGE)

ENUM_START(HitTest, HITTEST)
	HITTEST_DEFAULT,
	HITTEST_ON,
	HITTEST_SOLID,
	HITTEST_CHILDREN,
	HITTEST_NOHIT,
ENUM_END(HitTest, HITTEST)

ENUM_START(AdvancedStartAction, ADVANCEDSTARTACTION)
	ADVANCEDSTARTACTION_EXIT,
	ADVANCEDSTARTACTION_UNIT,
	ADVANCEDSTARTACTION_CITY,
	ADVANCEDSTARTACTION_POP,
	ADVANCEDSTARTACTION_CULTURE,
	ADVANCEDSTARTACTION_BUILDING,
	ADVANCEDSTARTACTION_IMPROVEMENT,
	ADVANCEDSTARTACTION_ROUTE,
	ADVANCEDSTARTACTION_TECH,
	ADVANCEDSTARTACTION_VISIBILITY,
	ADVANCEDSTARTACTION_AUTOMATE,
ENUM_END(AdvancedStartAction, ADVANCEDSTARTACTION)

ENUM_START(AnimationPath, ANIMATIONPATH)
	ANIMATIONPATH_NONE = -1,

	// Default animation paths
	ANIMATIONPATH_IDLE,
	ANIMATIONPATH_MOVE,
	ANIMATIONPATH_DAMAGE,				//!< Updates the damage state for the unit

	// Combat related animation paths
	ANIMATIONPATH_RANDOMIZE_ANIMATION_SET,
	ANIMATIONPATH_NUKE_STRIKE,
	ANIMATIONPATH_MELEE_STRIKE,
	ANIMATIONPATH_MELEE_HURT,
	ANIMATIONPATH_MELEE_DIE,
	ANIMATIONPATH_MELEE_FORTIFIED,
	ANIMATIONPATH_MELEE_DIE_FADE,		//!< Used only in combat. The colateral damage die should have a fade integrated.
	ANIMATIONPATH_MELEE_FLEE,			//!< Used only by settler children, so they don't die in combat

	// Ranged combat related animation paths
	ANIMATIONPATH_RANGED_STRIKE,
	ANIMATIONPATH_RANGED_DIE,
	ANIMATIONPATH_RANGED_FORTIFIED,
	ANIMATIONPATH_RANGED_RUNHIT,
	ANIMATIONPATH_RANGED_RUNDIE,
	ANIMATIONPATH_RANGED_DIE_FADE,		//!< Used only in combat. The colateral damage die should have a fade integrated.
	ANIMATIONPATH_LEADER_COMMAND,

	// Air Units animation paths
	ANIMATIONPATH_AIRFADEIN,
	ANIMATIONPATH_AIRFADEOUT,
	ANIMATIONPATH_AIRSTRIKE,
	ANIMATIONPATH_AIRBOMB,

	//mission related animation paths
	ANIMATIONPATH_HEAL,
	ANIMATIONPATH_SLEEP,
	ANIMATIONPATH_FORTIFY,
	ANIMATIONPATH_MELEE_FORTIFY,
	ANIMATIONPATH_PILLAGE,
	ANIMATIONPATH_SENTRY,
	ANIMATIONPATH_FOUND,
	ANIMATIONPATH_IRRIGATE,
	ANIMATIONPATH_BUILD,
	ANIMATIONPATH_MINE,
	ANIMATIONPATH_CHOP,
	ANIMATIONPATH_SHOVEL,
	ANIMATIONPATH_RAILROAD,
	ANIMATIONPATH_SABOTAGE,
	ANIMATIONPATH_DESTROY,
	ANIMATIONPATH_STEAL_PLANS,
	ANIMATIONPATH_GREAT_EVENT,
	ANIMATIONPATH_SURRENDER,
	ANIMATIONPATH_AIRPATROL,
ENUM_END(AnimationPath, ANIMATIONPATH)

// advc.004s: (Caveat: Reordering these breaks savegame compatibility)
ENUM_START(PlayerHistory, PLAYER_HISTORY)
	PLAYER_HISTORY_SCORE,
	PLAYER_HISTORY_ECONOMY,
	PLAYER_HISTORY_INDUSTRY,
	PLAYER_HISTORY_AGRICULTURE,
	PLAYER_HISTORY_POWER,
	PLAYER_HISTORY_CULTURE,
	PLAYER_HISTORY_ESPIONAGE,
ENUM_END(PlayerHistory, PLAYER_HISTORY)


enum CivilopediaWidgetShowTypes
{
	CIVILOPEDIA_WIDGET_SHOW_NONE,
	CIVILOPEDIA_WIDGET_SHOW_LAND,
	CIVILOPEDIA_WIDGET_SHOW_WATER,
};

enum ZoomLevelTypes
{
	ZOOM_UNKNOWN							= 0x00000000,
	ZOOM_DETAIL								= 0x00000001,
	ZOOM_NORMAL								= 0x00000002,
	ZOOM_GLOBEVIEW_TRANSITION				= 0x00000004,
	ZOOM_GLOBEVIEW							= 0x00000008,
};

//Warning: these values are used as an index into a fixed array
enum PlotLandscapeLayers
{
	PLOT_LANDSCAPE_LAYER_ALL = -1,
	PLOT_LANDSCAPE_LAYER_BASE = 0,
	PLOT_LANDSCAPE_LAYER_RECOMMENDED_PLOTS = 1,
	PLOT_LANDSCAPE_LAYER_WORLD_BUILDER = 2,
	PLOT_LANDSCAPE_LAYER_NUMPAD_HELP = 2,
	PLOT_LANDSCAPE_LAYER_REVEALED_PLOTS = 1,
};

enum AreaBorderLayers
{
	AREA_BORDER_LAYER_REVEALED_PLOTS,
	AREA_BORDER_LAYER_WORLD_BUILDER,
	AREA_BORDER_LAYER_FOUNDING_BORDER,
	AREA_BORDER_LAYER_CITY_RADIUS,
	AREA_BORDER_LAYER_RANGED,
	AREA_BORDER_LAYER_HIGHLIGHT_PLOT,
	AREA_BORDER_LAYER_BLOCKADING,
	AREA_BORDER_LAYER_BLOCKADED,
	NUM_AREA_BORDER_LAYERS
};

enum EngineDirtyBits
{
	GlobeTexture_DIRTY_BIT,
	GlobePartialTexture_DIRTY_BIT,
	MinimapTexture_DIRTY_BIT,
	CultureBorders_DIRTY_BIT,
#ifdef _USRDLL
	NUM_ENGINE_DIRTY_BITS
#endif
};

enum InterfaceDirtyBits
{
	SelectionCamera_DIRTY_BIT,
	Fog_DIRTY_BIT,
	GlobeLayer_DIRTY_BIT,
	GlobeInfo_DIRTY_BIT,
	Waypoints_DIRTY_BIT,
	PercentButtons_DIRTY_BIT,
	MiscButtons_DIRTY_BIT,
	PlotListButtons_DIRTY_BIT,
	SelectionButtons_DIRTY_BIT,
	CitizenButtons_DIRTY_BIT,
	ResearchButtons_DIRTY_BIT,
	Event_DIRTY_BIT,
	Center_DIRTY_BIT,
	GameData_DIRTY_BIT,
	Score_DIRTY_BIT,
	TurnTimer_DIRTY_BIT,
	Help_DIRTY_BIT,
	MinimapSection_DIRTY_BIT,
	SelectionSound_DIRTY_BIT,
	Cursor_DIRTY_BIT,
	CityInfo_DIRTY_BIT,
	UnitInfo_DIRTY_BIT,
	Popup_DIRTY_BIT,
	CityScreen_DIRTY_BIT,
	InfoPane_DIRTY_BIT,
	Flag_DIRTY_BIT,
	HighlightPlot_DIRTY_BIT,
	ColoredPlots_DIRTY_BIT,
	BlockadedPlots_DIRTY_BIT,
	Financial_Screen_DIRTY_BIT,
	Foreign_Screen_DIRTY_BIT,
	Soundtrack_DIRTY_BIT,
	Domestic_Advisor_DIRTY_BIT,
	Espionage_Advisor_DIRTY_BIT,
	Advanced_Start_DIRTY_BIT,
	Tech_Screen_DIRTY_BIT, // advc.068
#ifdef _USRDLL
	NUM_INTERFACE_DIRTY_BITS
#endif
};

enum FontSymbols
{
	// 'OTHER' symbols
	HAPPY_CHAR = 0,
	UNHAPPY_CHAR,
	HEALTHY_CHAR,
	UNHEALTHY_CHAR,
	BULLET_CHAR,
	STRENGTH_CHAR,
	MOVES_CHAR,
	RELIGION_CHAR,
	STAR_CHAR,
	SILVER_STAR_CHAR,
	TRADE_CHAR,
	DEFENSE_CHAR,
	GREAT_PEOPLE_CHAR,
	BAD_GOLD_CHAR,
	BAD_FOOD_CHAR,
	EATEN_FOOD_CHAR,
	GOLDEN_AGE_CHAR,
	ANGRY_POP_CHAR,
	OPEN_BORDERS_CHAR,
	DEFENSIVE_PACT_CHAR,
	MAP_CHAR,
	OCCUPATION_CHAR,
	POWER_CHAR,
/*************************************************************************************************/
/** TGA_INDEXATION									                                BUG mod      */
/**                                                                                              */
/**                                                                                              */
/*************************************************************************************************/
	// <advc.002f> from BULL
	CITIZEN_CHAR,
	GREAT_GENERAL_CHAR,
	AIRPORT_CHAR, // </advc.002f>
/*************************************************************************************************/
/** TGA_INDEXATION									                                BUG mod      */
/**                                                                                              */
/**                                                                                              */
/*************************************************************************************************/
	/*	advc.187: So that BUG doesn't need to access the attitude symbols
		through offsets */
	WORST_ATTITUDE_CHAR,
#ifdef _USRDLL
	MAX_NUM_SYMBOLS
#endif
};

enum CustomMapOptionTypes
{
	NO_CUSTOM_MAPOPTION = -1
};

enum DiploCommentTypes
{
	NO_DIPLOCOMMENT = -1
};

enum SymbolTypes
{
	NO_SYMBOL = -1
};

enum ArtStyleTypes // Used for managing Art Differences based on nationality
{
	NO_ARTSTYLE = -1
};

enum FootstepAudioTypes
{
	NO_FOOTSTEPAUDIO = -1
};

enum FootstepAudioTags
{
	NO_FOOTSTEPAUDIO_TAG = -1
};

enum PopupStates
{
	POPUPSTATE_IMMEDIATE,
	POPUPSTATE_QUEUED,
	POPUPSTATE_MINIMIZED,
};

/*  This is our current relationship with each one of our connected network peers
	(not exposed to python) */
enum InitStates
{
	INIT_INACTIVE,
	INIT_CONNECTED,
	INIT_SENT_READY,
	INIT_READY,
	INIT_ASSIGNED_ID,
	INIT_SENT_ID,
	INIT_PEER,
	INIT_FILE_TRANSFER,
	INIT_TRANSFER_COMPLETE,
	INIT_AUTHORIZED,
	INIT_MAP_CONFIRMED,
	INIT_GAME_STARTED,
};

enum TileArtTypes // (not exposed to Python)
{
	TILE_ART_TYPE_NONE = -1,
	TILE_ART_TYPE_TREES,
	TILE_ART_TYPE_HALF_TILING,
	TILE_ART_TYPE_PLOT_TILING,
	NUM_TILE_ART_TYPES
};

enum LightTypes // (not exposed to Python)
{
	LIGHT_TYPE_NONE = -1,
	LIGHT_TYPE_SUN,
	LIGHT_TYPE_TERRAIN,
	LIGHT_TYPE_UNIT,
	NUM_LIGHT_TYPES
};

enum ChatTargetTypes
{
	NO_CHATTARGET = -1,
	CHATTARGET_ALL = -2,
	CHATTARGET_TEAM = -3,
};

/*	advc (note): Nonnegative values are reserved for team votes
	(i.e. players electing one team to become e.g. Secretary General). */
enum PlayerVoteTypes
{
	NO_PLAYER_VOTE_CHECKED = -6,
	FIRST_PLAYER_VOTE = NO_PLAYER_VOTE_CHECKED, // advc.enum
	PLAYER_VOTE_NEVER = -5,
	PLAYER_VOTE_ABSTAIN = -4,
	PLAYER_VOTE_NO = -3,
	PLAYER_VOTE_YES = -2,
	NO_PLAYER_VOTE = -1
};

enum EndTurnButtonStates
{
	END_TURN_GO,
	END_TURN_OVER_HIGHLIGHT,
	END_TURN_OVER_DARK,
#ifdef _USRDLL
	NUM_END_TURN_STATES
#endif
};

enum FogTypes
{
	FOG_TYPE_NONE,
	FOG_TYPE_PARALLEL,
	FOG_TYPE_PROJECTED,
	NUM_FOG_TYPES
};

// AnimationTypes is depreciated, and will be eventually removed.
// BONUSANIMATION_* and IMPROVEMENTANIMATION_* are still used, and will be left.
enum AnimationTypes
{
	NONE_ANIMATION = -1,	// NO_ANIMATION is used by FirePlace

	BONUSANIMATION_UNIMPROVED = 1,
	BONUSANIMATION_NOT_WORKED,
	BONUSANIMATION_WORKED,

	IMPROVEMENTANIMATION_OFF = 2,
	IMPROVEMENTANIMATION_ON,
	IMPROVEMENTANIMATION_OFF_EXTRA,
	IMPROVEMENTANIMATION_ON_EXTRA_1,
	IMPROVEMENTANIMATION_ON_EXTRA_2,
	IMPROVEMENTANIMATION_ON_EXTRA_3,
	IMPROVEMENTANIMATION_ON_EXTRA_4,
};

//!< Animation category operators.
enum AnimationOperatorTypes
{
	ANIMOP_FIRST = 1001,
	ANIMOP_RAND_FPR = ANIMOP_FIRST,			//!< Sets the FPR to a random number [0..1].
	ANIMOP_SET_FPR,							//!< Sets the FPR to the input value
	ANIMOP_SET_BR,							//!< Sets the BR to true the input value is non-zero
	ANIMOP_ADD_FPR,							//!< Adds the input value to the FPR register (input can be negative)
	ANIMOP_TEST_GT,							//!< Sets/resets the BR if the FPR is greater than the input
	ANIMOP_TEST_LT,							//!< Sets/resets the BR if the FPR is less than the input
	ANIMOP_LOAD_CAS,						//!< Sets the FPR to the CAS/32.
	ANIMOP_SET_ANIMATION_SET,						//!< Modifies the current animation set, by setting it to ((FPR*32)%32)
	ANIMOP_SKIP_IF,							//!< Skips the given number of instructions if the BR is true
	ANIMOP_CAS_INCR,						//!< Increments the CAS (and resets to zero if it is the maximum)
	ANIMOP_IS_RANGED,						//!< Sets the BR to true if the unit is "ranged", and to false otherwise
	ANIMOP_DEACTIVATE_DAMAGE_LAYERS,					//!< Deactivates all animations that are layered
	ANIMOP_SETCAS_DAMAGE,					//!< Set the current animation set to the damage level of the unit (damage/art define max)
	ANIMOP_LAST
};

//! Enumeration for playing events with CvLeaderheadWidget
enum LeaderheadAction
{
	NO_LEADERANIM = -1,			//!< If used with CvLeaderheadWidget::PerformAction, plays the idle animation)
	LEADERANIM_GREETING,		//!< The leaderhead greets you
	LEADERANIM_FRIENDLY,		//!< The leaderhead is friendly to you
	LEADERANIM_PLEASED,			//!< The leaderhead is pleased
	LEADERANIM_CAUTIOUS,		//!< The leaderhead is cautious
	LEADERANIM_ANNOYED,			//!< The leaderhead is annoyed
	LEADERANIM_FURIOUS,			//!< The leaderhead is furious
	LEADERANIM_DISAGREE,		//!< The leaderhead makes a disagree gesture
	LEADERANIM_AGREE,			//!< The leaderhead makes an agree gesture
	NUM_LEADERANIM_TYPES
};

enum InitializationStates
{
	INIT_OK,
	INIT_FAILED,
#ifdef _USRDLL
	NUM_INIT_STATES
#endif
};

enum GameType
{
	GAME_NONE = -1,
	GAME_SP_NEW,
	GAME_SP_SCENARIO,
	GAME_SP_LOAD,
	GAME_MP_NEW,
	GAME_MP_SCENARIO,
	GAME_MP_LOAD,
	GAME_HOTSEAT_NEW,
	GAME_HOTSEAT_SCENARIO,
	GAME_HOTSEAT_LOAD,
	GAME_PBEM_NEW,
	GAME_PBEM_SCENARIO,
	GAME_PBEM_LOAD,
	GAME_REPLAY,
#ifdef _USRDLL
	NUM_GAMETYPES
#endif
};

enum GameMode
{
	NO_GAMEMODE = -1,
	GAMEMODE_NORMAL,
	GAMEMODE_PITBOSS,
	NUM_GAMEMODES
};

enum GamePwdTypes
{
	PWD_NEWGAME,
	PWD_SCENARIO,
	PWD_JOINGAME,
};

enum SlotClaim
{
	SLOTCLAIM_UNASSIGNED,
	SLOTCLAIM_RESERVED,
	SLOTCLAIM_ASSIGNED,
#ifdef _USRDLL
	NUM_SLOTCLAIMS
#endif
};

enum SlotStatus
{
	SS_OPEN,
	SS_COMPUTER,
	SS_CLOSED,
	SS_TAKEN,
	SS_MAX_SLOT_STATUS,
};

enum InterfaceVisibility
{
	INTERFACE_SHOW,
	INTERFACE_HIDE,
	INTERFACE_HIDE_ALL,
	INTERFACE_MINIMAP_ONLY,
	INTERFACE_ADVANCED_START,
};

enum GenericButtonSizes	
{
	BUTTON_SIZE_46,
	BUTTON_SIZE_32,
	BUTTON_SIZE_24,
	BUTTON_SIZE_16,
	BUTTON_SIZE_CUSTOM,
};

enum WorldBuilderPopupTypes
{
	WBPOPUP_NONE = -1,

	WBPOPUP_START = 200,
	WBPOPUP_CITY=WBPOPUP_START,		// first entry, starts at 0
	WBPOPUP_UNIT,
	WBPOPUP_PLAYER,
	WBPOPUP_PLOT,
	WBPOPUP_TERRAIN,
	WBPOPUP_FEATURE,
	WBPOPUP_IMPROVEMENT,
	WBPOPUP_GAME,
	NUM_WBPOPUP
};

enum EventType
{
	// mouseEvent
	EVT_LBUTTONDOWN = 1,
	EVT_LBUTTONDBLCLICK,
	EVT_RBUTTONDOWN,
	EVT_BACK,
	EVT_FORWARD,

	// kbdEvent
	EVT_KEYDOWN,
	EVT_KEYUP,
};

enum FontTypes // Available Fonts
{
	TITLE_FONT,
	GAME_FONT,
	SMALL_FONT,
	MENU_FONT,
	MENU_HIGHLIGHT_FONT,
};

enum PanelStyles
{
	// Built in styles
	PANEL_STYLE_STANDARD,
	PANEL_STYLE_SOLID,
	PANEL_STYLE_EMPTY,
	PANEL_STYLE_FLAT,
	PANEL_STYLE_IN,
	PANEL_STYLE_OUT,
	PANEL_STYLE_EXTERNAL,
	PANEL_STYLE_DEFAULT,

	// Civ specific styles
	PANEL_STYLE_CIVILPEDIA,
	PANEL_STYLE_STONE,
	PANEL_STYLE_UNITSTAT,
	PANEL_STYLE_BLUELARGE,
	PANEL_STYLE_BLUE50,

	PANEL_STYLE_TOPBAR,
	PANEL_STYLE_BOTTOMBAR,
	PANEL_STYLE_TECH,

	PANEL_STYLE_GAMEHUD_LEFT,
	PANEL_STYLE_GAMEHUD_RIGHT,
	PANEL_STYLE_GAMEHUD_CENTER,
	PANEL_STYLE_GAMEHUD_STATS,
	PANEL_STYLE_GAME_MAP,
	PANEL_STYLE_GAME_TOPBAR,
	PANEL_STYLE_HUD_HELP,

	PANEL_STYLE_CITY_LEFT,
	PANEL_STYLE_CITY_RIGHT,
	PANEL_STYLE_CITY_TOP,
	PANEL_STYLE_CITY_TANSHADE,
	PANEL_STYLE_CITY_INFO,
	PANEL_STYLE_CITY_TANTL,
	PANEL_STYLE_CITY_TANTR,
	PANEL_STYLE_CITY_COLUMNL,
	PANEL_STYLE_CITY_COLUMNC,
	PANEL_STYLE_CITY_COLUMNR,
	PANEL_STYLE_CITY_TITLE,

	PANEL_STYLE_DAWN,
	PANEL_STYLE_DAWNTOP,
	PANEL_STYLE_DAWNBOTTOM,

	PANEL_STYLE_MAIN,
	PANEL_STYLE_MAIN_BLACK25,
	PANEL_STYLE_MAIN_BLACK50,
	PANEL_STYLE_MAIN_WHITE,
	PANEL_STYLE_MAIN_WHITETAB,
	PANEL_STYLE_MAIN_TAN,
	PANEL_STYLE_MAIN_TAN15,
	PANEL_STYLE_MAIN_TANL,
	PANEL_STYLE_MAIN_TANR,
	PANEL_STYLE_MAIN_TANT,
	PANEL_STYLE_MAIN_TANB,
	PANEL_STYLE_MAIN_BOTTOMBAR,
	PANEL_STYLE_MAIN_SELECT,
};

enum ButtonStyles
{
	BUTTON_STYLE_STANDARD,
	BUTTON_STYLE_ETCHED,
	BUTTON_STYLE_FLAT,
	BUTTON_STYLE_IMAGE,
	BUTTON_STYLE_LABEL,
	BUTTON_STYLE_LINK,
	BUTTON_STYLE_SQUARE,
	BUTTON_STYLE_TOOL,
	BUTTON_STYLE_DEFAULT,

	// Civ specific styles
	BUTTON_STYLE_CIRCLE,
	BUTTON_STYLE_CITY_B01,
	BUTTON_STYLE_CITY_B02TL,
	BUTTON_STYLE_CITY_B02TR,
	BUTTON_STYLE_CITY_B02BL,
	BUTTON_STYLE_CITY_B02BR,
	BUTTON_STYLE_CITY_B03TL,
	BUTTON_STYLE_CITY_B03TC,
	BUTTON_STYLE_CITY_B03TR,
	BUTTON_STYLE_CITY_B03BL,
	BUTTON_STYLE_CITY_B03BC,
	BUTTON_STYLE_CITY_B03BR,
	BUTTON_STYLE_CITY_FLAT,
	BUTTON_STYLE_CITY_PLUS,
	BUTTON_STYLE_CITY_MINUS,

	BUTTON_STYLE_ARROW_LEFT,
	BUTTON_STYLE_ARROW_RIGHT,
};

enum TableStyles
{
	TABLE_STYLE_STANDARD,
	TABLE_STYLE_EMPTY,
	TABLE_STYLE_ALTEMPTY,
	TABLE_STYLE_CITY,
	TABLE_STYLE_EMPTYSELECTINACTIVE,
	TABLE_STYLE_ALTDEFAULT,
	TABLE_STYLE_STAGINGROOM,
};

enum CivLoginStates
{
	NO_CIV_LOGIN = -1,

	LOGIN_CIV_OK,
	LOGIN_CIV_BAD_PWD,
	LOGIN_CIV_TAKEN,
	LOGIN_CIV_HAS_ID,
};

enum VoteStatusTypes
{
	NO_VOTESTATUS = -1,

	VOTESTATUS_TIED = -2,
	VOTESTATUS_UNDECIDED = -3,
	VOTESTATUS_INCOMPLETE = -4
};

// Tab Group in Options Menu
enum TabGroupTypes
{
	NO_TABGROUP = -1,

	TABGROUP_GAME,
	TABGROUP_INPUT,
	TABGROUP_GRAPHICS,
	TABGROUP_AUDIO,
	TABGROUP_CLOCK,

#ifdef _USRDLL
	NUM_TABGROUPS
#endif
};

/*------------------------------------------------------------------------------------
Enum:		EAudioTag
Purpose:	To enumerate all of the tag strings loaded from the csv or xml files
------------------------------------------------------------------------------------*/
enum AudioTag
{
	AUDIOTAG_NONE = -1,
	AUDIOTAG_SOUNDID,
	AUDIOTAG_CONTEXTID,
	AUDIOTAG_SOUNDTYPE,
	AUDIOTAG_2DSCRIPT,
	AUDIOTAG_3DSCRIPT,
	AUDIOTAG_SOUNDSCAPE,
	AUDIOTAG_POSITION,
	AUDIOTAG_SCRIPTTYPE,
	AUDIOTAG_LOADTYPE,
	AUDIOTAG_COUNT,
};

enum ActionSubTypes
{
	NO_ACTIONSUBTYPE,
	ACTIONSUBTYPE_INTERFACEMODE,
	ACTIONSUBTYPE_COMMAND,
	ACTIONSUBTYPE_BUILD,
	ACTIONSUBTYPE_PROMOTION,
	ACTIONSUBTYPE_UNIT,
	ACTIONSUBTYPE_RELIGION,
	ACTIONSUBTYPE_CORPORATION,
	ACTIONSUBTYPE_SPECIALIST,
	ACTIONSUBTYPE_BUILDING,
	ACTIONSUBTYPE_CONTROL,
	ACTIONSUBTYPE_AUTOMATE,
	ACTIONSUBTYPE_MISSION,
#ifdef _USRDLL
	NUM_ACTIONSUBTYPES
#endif
};

enum PopupControlLayout
{
	POPUP_LAYOUT_LEFT,
	POPUP_LAYOUT_CENTER,
	POPUP_LAYOUT_RIGHT,
	POPUP_LAYOUT_STRETCH,
	POPUP_LAYOUT_NUMLAYOUTS
};

enum JustificationTypes
{
	DLL_FONT_LEFT_JUSTIFY = 1<<0,
	DLL_FONT_RIGHT_JUSTIFY = 1<<1,
	DLL_FONT_CENTER_JUSTIFY = 1<<2,
	DLL_FONT_CENTER_VERTICALLY = 1<<3,
	DLL_FONT_ADDITIVE = 1<<4,
};

enum ToolTipAlignTypes
{
	TOOLTIP_TOP_LEFT,
	TOOLTIP_TOP_INLEFT,
	TOOLTIP_TOP_CENTER,
	TOOLTIP_TOP_INRIGHT,
	TOOLTIP_TOP_RIGHT,

	TOOLTIP_INTOP_RIGHT,
	TOOLTIP_CENTER_RIGHT,
	TOOLTIP_INBOTTOM_RIGHT,

	TOOLTIP_BOTTOM_RIGHT,
	TOOLTIP_BOTTOM_INRIGHT,
	TOOLTIP_BOTTOM_CENTER,
	TOOLTIP_BOTTOM_INLEFT,
	TOOLTIP_BOTTOM_LEFT,

	TOOLTIP_INBOTTOM_LEFT,
	TOOLTIP_CENTER_LEFT,
	TOOLTIP_INTOP_LEFT,
};

enum ActivationTypes
{
	ACTIVATE_NORMAL,
	ACTIVATE_CHILDFOCUS,
	ACTIVATE_MIMICPARENT,
	ACTIVATE_MIMICPARENTFOCUS,
};

enum GraphicLevelTypes
{
	GRAPHICLEVEL_HIGH,
	GRAPHICLEVEL_MEDIUM,
	GRAPHICLEVEL_LOW,
	GRAPHICLEVEL_CURRENT,
#ifdef _USRDLL
	NUM_GRAPHICLEVELS
#endif
};

enum GlobeLayerTypes
{
	GLOBE_LAYER_STRATEGY = -1,
	GLOBE_LAYER_TRADE,
	GLOBE_LAYER_UNIT,
	GLOBE_LAYER_RESOURCE,
	GLOBE_LAYER_RELIGION,
	GLOBE_LAYER_CULTURE,
#ifdef _USRDLL
	NUM_GLOBE_LAYER_TYPES,
	// <advc.004m>
	NO_GLOBE_LAYER,
	GLOBE_LAYER_UNKNOWN // </advc.004m>
#endif
};

enum GlobeLayerUnitOptionTypes
{
	SHOW_ALL_MILITARY,
	SHOW_TEAM_MILITARY,
	/*  advc.004z: The third position is the default, which, apparently, cannot
		be changed properly with the SDK. Put a dummy option in that position,
		have it behave like SHOW_ALL_MILITARY and hide it from the player
		(through CvMainInterface.py). */
	GLOBE_LAYER_UNIT_DUMMY,
	SHOW_ENEMIES_IN_TERRITORY,
	SHOW_ENEMIES,
	SHOW_PLAYER_DOMESTICS,
#ifdef _USRDLL
	NUM_UNIT_OPTION_TYPES
#endif
};

enum GlobeLayerResourceOptionTypes
{
	SHOW_ALL_RESOURCES,
	SHOW_STRATEGIC_RESOURCES,
	SHOW_HAPPY_RESOURCES,
	SHOW_HEALTH_RESOURCES,
#ifdef _USRDLL
	NUM_RESOURCE_OPTION_TYPES
#endif
};

enum PlotIndicatorVisibilityFlags
{
	PLOT_INDICATOR_VISIBLE_ALWAYS,
	PLOT_INDICATOR_VISIBLE_ONSCREEN_ONLY,
	PLOT_INDICATOR_VISIBLE_OFFSCREEN_ONLY,
	PLOT_INDICATOR_VISIBLE_ONGLOBE_ONLY,
	PLOT_INDICATOR_VISIBLE_NEVER
};

enum UnitSubEntityTypes
{
	UNIT_SUB_ENTITY_NORMAL,
	UNIT_SUB_ENTITY_LEADER,
	UNIT_SUB_ENTITY_SIEGE_TOWER,
	UNIT_SUB_ENTITY_COUNT
};

// <advc.enum>
/*	CityPlotTypes enum - idea from "We the People".
	Replacing preprocessor defines in CvDefines. Note that those defines have
	been compiled into the EXE, so, to avoid inconsistencies, the values of
	NUM_CITY_PLOTS, CITY_HOME_PLOT, CITY_PLOTS_RADIUS and CITY_PLOTS_DIAMETER
	should never be changed. */
ENUM_START(CityPlot, CITYPLOT)
	CITY_HOME_PLOT = 0,
	FIRST_ADJACENT_PLOT = 1,
	CITY_PLOTS_RADIUS = 2,
	CITY_PLOTS_DIAMETER = CITY_PLOTS_RADIUS * 2 + 1,
	NUM_INNER_PLOTS = 9,
	LAST_CITY_PLOT = 20,
ENUM_END(CityPlot, CITYPLOT)
#define NUM_CITY_PLOTS ((int)NUM_CITYPLOT_TYPES)

#define DO_FOR_EACH_FALSE_FRIEND(DO) \
	DO(Player,Team) \
	DO(PlayerOption,GameOption) \
	DO(GameOption,MPOption) \
	DO(GraphicOption,PlayerOption) \
	DO(Yield,Commerce) \
	DO(Direction,CardinalDirection) \
	DO(Vote,VoteSource) \
	DO(Vote,PlayerVote) \
	DO(VoteSource,PlayerVote) \
	DO(Religion,Corporation) \
	DO(Civic,CivicOption) \
	DO(Color,PlayerColor) \
	DO(Build,Improvement) \
	DO(Bonus,BonusClass) \
	DO(Building,BuildingClass) \
	DO(Building,SpecialBuilding) \
	DO(BuildingClass,SpecialBuilding) \
	DO(Building,Unit) \
	DO(Unit,UnitClass) \
	DO(Unit,UnitAI) \
	DO(SpecialUnit,Unit) \
	DO(SpecialUnit,UnitClass) \
	DO(UnitCombat,Unit) \
	DO(UnitCombat,UnitClass) \
	DO(UnitCombat,UnitAI) \
	DO(BuildingClass,UnitClass) \
	DO(Project,Building) \
	DO(Project,BuildingClass) \
	DO(Project,Unit) \
	DO(Project,UnitClass) \
	DO(Event,EventTrigger) \
	DO(Concept,NewConcept) \
	DO(Mission,EspionageMission)

#define FORBID_COMPARISON_OPERATORS(Type1, Type2) \
	bool operator==(Type1, Type2); \
	bool operator!=(Type1, Type2); \
	bool operator>(Type1, Type2); \
	bool operator<(Type1, Type2); \
	bool operator>=(Type1, Type2); \
	bool operator<=(Type1, Type2);
/*  ^No definition - so that these comparisons result in a linker error.
	The linker error will say in which function the offending call occurs.
	A compiler error would also provide a line number, but the compiler
	couldn't tell if a global function has any call locations. */

#define FORBID_ENUM_COMPARISON_OPERATORS(EnumPrefix1, EnumPrefix2) \
	FORBID_COMPARISON_OPERATORS(EnumPrefix1##Types, EnumPrefix2##Types) \
	FORBID_COMPARISON_OPERATORS(EnumPrefix2##Types, EnumPrefix1##Types)

DO_FOR_EACH_FALSE_FRIEND(FORBID_ENUM_COMPARISON_OPERATORS);

/*  advc: NO_... is easily confused with NULL, but prohibiting
	enum-int comparisons isn't currently feasible. Perhaps if and when
	the return types of functions like CvUnitInfo::getPrereqAndBonus
	are changed to enum types. */
/*	This doesn't work either:
	#undef NULL
	enum null_t { NULL };
	Couldn't assign that to pointers. */
/*#define FORBID_INT_EQUALITY_TEST(EnumPrefix, Dummy) \
	bool operator==(EnumPrefix##Types, int); \
	bool operator==(int, EnumPrefix##Types); \
	bool operator!=(EnumPrefix##Types, int); \
	bool operator!=(int, EnumPrefix##Types);
DO_FOR_EACH_DYN_INFO_TYPE(FORBID_INT_EQUALITY_TEST)
DO_FOR_EACH_STATIC_INFO_TYPE(FORBID_INT_EQUALITY_TEST)
#undef FORBID_INT_EQUALITY_TEST*/

#undef DO_FOR_EACH_FALSE_FRIEND
#undef FORBID_COMPARISON_OPERATORS
#undef FORBID_ENUM_COMPARISON_OPERATORS
// </advc.enum>
#endif	// CVENUMS_h
